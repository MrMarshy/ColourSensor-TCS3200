
ReadRGBColours.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047bc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a74  08004a74  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a7c  08004a7c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000074  08004af8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004af8  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd78  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d79  00000000  00000000  0002de1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  0002fb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  000308d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027e86  00000000  00000000  00031510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0d9  00000000  00000000  00059396  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa75f  00000000  00000000  0006346f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015dbce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a18  00000000  00000000  0015dc4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	080049a4 	.word	0x080049a4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	080049a4 	.word	0x080049a4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  char msg[64] = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2240      	movs	r2, #64	; 0x40
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fdc3 	bl	8004188 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fe5c 	bl	80012be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f871 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f985 	bl	8000918 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800060e:	f000 f953 	bl	80008b8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000612:	f000 f8fd 	bl	8000810 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  sprintf(msg, "RGB Colour Sensor Demo Program\r\n");
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4a2b      	ldr	r2, [pc, #172]	; (80006c8 <main+0xd8>)
 800061a:	461c      	mov	r4, r3
 800061c:	4615      	mov	r5, r2
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	682b      	ldr	r3, [r5, #0]
 8000628:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fe07 	bl	8000240 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	1d39      	adds	r1, r7, #4
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	4823      	ldr	r0, [pc, #140]	; (80006cc <main+0xdc>)
 800063e:	f003 f8db 	bl	80037f8 <HAL_UART_Transmit>

  // Set Colour Sensors frequency scaling to 20%
  HAL_GPIO_WritePin(GPIOE, S0Pin_Pin, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000648:	4821      	ldr	r0, [pc, #132]	; (80006d0 <main+0xe0>)
 800064a:	f001 f973 	bl	8001934 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S1Pin_GPIO_Port, S1Pin_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000654:	481f      	ldr	r0, [pc, #124]	; (80006d4 <main+0xe4>)
 8000656:	f001 f96d 	bl	8001934 <HAL_GPIO_WritePin>

  // Assign function pointers to read RGB Pulse widths
  colourSensor.getRedPulseWidth = getRedPulseWidth;
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <main+0xe8>)
 800065c:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <main+0xec>)
 800065e:	611a      	str	r2, [r3, #16]
  colourSensor.getGreenPulseWidth = getGreenPulseWidth;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <main+0xe8>)
 8000662:	4a1f      	ldr	r2, [pc, #124]	; (80006e0 <main+0xf0>)
 8000664:	615a      	str	r2, [r3, #20]
  colourSensor.getBluePulseWidth = getBluePulseWidth;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <main+0xe8>)
 8000668:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <main+0xf4>)
 800066a:	619a      	str	r2, [r3, #24]

  // Do Calibration (1 for yes, 0 for not)
  colourSensor.doCalibration = 0;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <main+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	73da      	strb	r2, [r3, #15]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Set sensor to read Red only
	  int r = colourSensor.getRedPulseWidth();
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <main+0xe8>)
 8000674:	691b      	ldr	r3, [r3, #16]
 8000676:	4798      	blx	r3
 8000678:	64f8      	str	r0, [r7, #76]	; 0x4c
	  HAL_Delay(200);
 800067a:	20c8      	movs	r0, #200	; 0xc8
 800067c:	f000 fe7c 	bl	8001378 <HAL_Delay>
	  int g = colourSensor.getGreenPulseWidth();
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <main+0xe8>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4798      	blx	r3
 8000686:	64b8      	str	r0, [r7, #72]	; 0x48
	  HAL_Delay(200);
 8000688:	20c8      	movs	r0, #200	; 0xc8
 800068a:	f000 fe75 	bl	8001378 <HAL_Delay>
	  int b = colourSensor.getBluePulseWidth();
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <main+0xe8>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4798      	blx	r3
 8000694:	6478      	str	r0, [r7, #68]	; 0x44
	  sprintf(msg, "%d,%d,%d\r\n", r, g, b);
 8000696:	1d38      	adds	r0, r7, #4
 8000698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800069e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80006a0:	4911      	ldr	r1, [pc, #68]	; (80006e8 <main+0xf8>)
 80006a2:	f003 fd79 	bl	8004198 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fdc9 	bl	8000240 <strlen>
 80006ae:	4603      	mov	r3, r0
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	1d39      	adds	r1, r7, #4
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <main+0xdc>)
 80006ba:	f003 f89d 	bl	80037f8 <HAL_UART_Transmit>
	  HAL_Delay(200);
 80006be:	20c8      	movs	r0, #200	; 0xc8
 80006c0:	f000 fe5a 	bl	8001378 <HAL_Delay>
  {
 80006c4:	e7d5      	b.n	8000672 <main+0x82>
 80006c6:	bf00      	nop
 80006c8:	080049bc 	.word	0x080049bc
 80006cc:	200000c4 	.word	0x200000c4
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40021400 	.word	0x40021400
 80006d8:	2000009c 	.word	0x2000009c
 80006dc:	08000c45 	.word	0x08000c45
 80006e0:	08000d45 	.word	0x08000d45
 80006e4:	08000e45 	.word	0x08000e45
 80006e8:	080049e0 	.word	0x080049e0

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0b8      	sub	sp, #224	; 0xe0
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fd44 	bl	8004188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2290      	movs	r2, #144	; 0x90
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fd35 	bl	8004188 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800071e:	f001 f923 	bl	8001968 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <SystemClock_Config+0x11c>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	4a38      	ldr	r2, [pc, #224]	; (8000808 <SystemClock_Config+0x11c>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6413      	str	r3, [r2, #64]	; 0x40
 800072e:	4b36      	ldr	r3, [pc, #216]	; (8000808 <SystemClock_Config+0x11c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073a:	4b34      	ldr	r3, [pc, #208]	; (800080c <SystemClock_Config+0x120>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000742:	4a32      	ldr	r2, [pc, #200]	; (800080c <SystemClock_Config+0x120>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000748:	6013      	str	r3, [r2, #0]
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <SystemClock_Config+0x120>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000756:	2301      	movs	r3, #1
 8000758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800075c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000772:	2304      	movs	r3, #4
 8000774:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000778:	2360      	movs	r3, #96	; 0x60
 800077a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f94a 	bl	8001a28 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800079a:	f000 fc2f 	bl	8000ffc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800079e:	f001 f8f3 	bl	8001988 <HAL_PWREx_EnableOverDrive>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007a8:	f000 fc28 	bl	8000ffc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007d0:	2103      	movs	r1, #3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fbd6 	bl	8001f84 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80007de:	f000 fc0d 	bl	8000ffc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80007e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fdbf 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80007fc:	f000 fbfe 	bl	8000ffc <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	37e0      	adds	r7, #224	; 0xe0
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_TIM3_Init+0xa0>)
 8000830:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <MX_TIM3_Init+0xa4>)
 8000832:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_TIM3_Init+0xa0>)
 8000836:	222f      	movs	r2, #47	; 0x2f
 8000838:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_TIM3_Init+0xa0>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_TIM3_Init+0xa0>)
 8000842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000846:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_TIM3_Init+0xa0>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_TIM3_Init+0xa0>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000854:	4816      	ldr	r0, [pc, #88]	; (80008b0 <MX_TIM3_Init+0xa0>)
 8000856:	f002 f9b3 	bl	8002bc0 <HAL_TIM_IC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000860:	f000 fbcc 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	480f      	ldr	r0, [pc, #60]	; (80008b0 <MX_TIM3_Init+0xa0>)
 8000874:	f002 fec6 	bl	8003604 <HAL_TIMEx_MasterConfigSynchronization>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800087e:	f000 fbbd 	bl	8000ffc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000882:	230a      	movs	r3, #10
 8000884:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000886:	2301      	movs	r3, #1
 8000888:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_TIM3_Init+0xa0>)
 800089a:	f002 fbba 	bl	8003012 <HAL_TIM_IC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80008a4:	f000 fbaa 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000144 	.word	0x20000144
 80008b4:	40000400 	.word	0x40000400

080008b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_USART3_UART_Init+0x58>)
 80008be:	4a15      	ldr	r2, [pc, #84]	; (8000914 <MX_USART3_UART_Init+0x5c>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_USART3_UART_Init+0x58>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USART3_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_USART3_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USART3_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USART3_UART_Init+0x58>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USART3_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USART3_UART_Init+0x58>)
 80008fc:	f002 ff2e 	bl	800375c <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000906:	f000 fb79 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000c4 	.word	0x200000c4
 8000914:	40004800 	.word	0x40004800

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	; 0x38
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b97      	ldr	r3, [pc, #604]	; (8000b8c <MX_GPIO_Init+0x274>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a96      	ldr	r2, [pc, #600]	; (8000b8c <MX_GPIO_Init+0x274>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b94      	ldr	r3, [pc, #592]	; (8000b8c <MX_GPIO_Init+0x274>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	623b      	str	r3, [r7, #32]
 8000944:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	4b91      	ldr	r3, [pc, #580]	; (8000b8c <MX_GPIO_Init+0x274>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a90      	ldr	r2, [pc, #576]	; (8000b8c <MX_GPIO_Init+0x274>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b8e      	ldr	r3, [pc, #568]	; (8000b8c <MX_GPIO_Init+0x274>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	61fb      	str	r3, [r7, #28]
 800095c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b8b      	ldr	r3, [pc, #556]	; (8000b8c <MX_GPIO_Init+0x274>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a8a      	ldr	r2, [pc, #552]	; (8000b8c <MX_GPIO_Init+0x274>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b88      	ldr	r3, [pc, #544]	; (8000b8c <MX_GPIO_Init+0x274>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b85      	ldr	r3, [pc, #532]	; (8000b8c <MX_GPIO_Init+0x274>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a84      	ldr	r2, [pc, #528]	; (8000b8c <MX_GPIO_Init+0x274>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b82      	ldr	r3, [pc, #520]	; (8000b8c <MX_GPIO_Init+0x274>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098e:	4b7f      	ldr	r3, [pc, #508]	; (8000b8c <MX_GPIO_Init+0x274>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a7e      	ldr	r2, [pc, #504]	; (8000b8c <MX_GPIO_Init+0x274>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b7c      	ldr	r3, [pc, #496]	; (8000b8c <MX_GPIO_Init+0x274>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0320 	and.w	r3, r3, #32
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a6:	4b79      	ldr	r3, [pc, #484]	; (8000b8c <MX_GPIO_Init+0x274>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a78      	ldr	r2, [pc, #480]	; (8000b8c <MX_GPIO_Init+0x274>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b76      	ldr	r3, [pc, #472]	; (8000b8c <MX_GPIO_Init+0x274>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	4b73      	ldr	r3, [pc, #460]	; (8000b8c <MX_GPIO_Init+0x274>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a72      	ldr	r2, [pc, #456]	; (8000b8c <MX_GPIO_Init+0x274>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b70      	ldr	r3, [pc, #448]	; (8000b8c <MX_GPIO_Init+0x274>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d6:	4b6d      	ldr	r3, [pc, #436]	; (8000b8c <MX_GPIO_Init+0x274>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a6c      	ldr	r2, [pc, #432]	; (8000b8c <MX_GPIO_Init+0x274>)
 80009dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b6a      	ldr	r3, [pc, #424]	; (8000b8c <MX_GPIO_Init+0x274>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009f4:	4866      	ldr	r0, [pc, #408]	; (8000b90 <MX_GPIO_Init+0x278>)
 80009f6:	f000 ff9d 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S1Pin_GPIO_Port, S1Pin_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a00:	4864      	ldr	r0, [pc, #400]	; (8000b94 <MX_GPIO_Init+0x27c>)
 8000a02:	f000 ff97 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, S3Pin_Pin|S2Pin_Pin|S0Pin_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8000a0c:	4862      	ldr	r0, [pc, #392]	; (8000b98 <MX_GPIO_Init+0x280>)
 8000a0e:	f000 ff91 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	4861      	ldr	r0, [pc, #388]	; (8000b9c <MX_GPIO_Init+0x284>)
 8000a18:	f000 ff8c 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a22:	4b5f      	ldr	r3, [pc, #380]	; (8000ba0 <MX_GPIO_Init+0x288>)
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	485c      	ldr	r0, [pc, #368]	; (8000ba4 <MX_GPIO_Init+0x28c>)
 8000a32:	f000 fdd5 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a36:	2332      	movs	r3, #50	; 0x32
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a46:	230b      	movs	r3, #11
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4854      	ldr	r0, [pc, #336]	; (8000ba4 <MX_GPIO_Init+0x28c>)
 8000a52:	f000 fdc5 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a56:	2386      	movs	r3, #134	; 0x86
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a66:	230b      	movs	r3, #11
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	484d      	ldr	r0, [pc, #308]	; (8000ba8 <MX_GPIO_Init+0x290>)
 8000a72:	f000 fdb5 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a76:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4840      	ldr	r0, [pc, #256]	; (8000b90 <MX_GPIO_Init+0x278>)
 8000a90:	f000 fda6 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : S1Pin_Pin */
  GPIO_InitStruct.Pin = S1Pin_Pin;
 8000a94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(S1Pin_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4839      	ldr	r0, [pc, #228]	; (8000b94 <MX_GPIO_Init+0x27c>)
 8000aae:	f000 fd97 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : S3Pin_Pin S2Pin_Pin S0Pin_Pin */
  GPIO_InitStruct.Pin = S3Pin_Pin|S2Pin_Pin|S0Pin_Pin;
 8000ab2:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4833      	ldr	r0, [pc, #204]	; (8000b98 <MX_GPIO_Init+0x280>)
 8000acc:	f000 fd88 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae2:	230b      	movs	r3, #11
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	4828      	ldr	r0, [pc, #160]	; (8000b90 <MX_GPIO_Init+0x278>)
 8000aee:	f000 fd77 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4824      	ldr	r0, [pc, #144]	; (8000b9c <MX_GPIO_Init+0x284>)
 8000b0a:	f000 fd69 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481e      	ldr	r0, [pc, #120]	; (8000b9c <MX_GPIO_Init+0x284>)
 8000b22:	f000 fd5d 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b26:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b38:	230a      	movs	r3, #10
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	4819      	ldr	r0, [pc, #100]	; (8000ba8 <MX_GPIO_Init+0x290>)
 8000b44:	f000 fd4c 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <MX_GPIO_Init+0x290>)
 8000b5e:	f000 fd3f 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b74:	230b      	movs	r3, #11
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MX_GPIO_Init+0x284>)
 8000b80:	f000 fd2e 	bl	80015e0 <HAL_GPIO_Init>

}
 8000b84:	bf00      	nop
 8000b86:	3738      	adds	r7, #56	; 0x38
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40021400 	.word	0x40021400
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40021800 	.word	0x40021800
 8000ba0:	10110000 	.word	0x10110000
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020000 	.word	0x40020000

08000bac <map>:

/* USER CODE BEGIN 4 */
static long map(long x, long in_min, long in_max, long out_min, long out_max){
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	603b      	str	r3, [r7, #0]

	in_max += 1;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
	out_max += 1;
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	623b      	str	r3, [r7, #32]

	long ret = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	6a39      	ldr	r1, [r7, #32]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	1a8a      	subs	r2, r1, r2
 8000bd2:	fb02 f203 	mul.w	r2, r2, r3
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1acb      	subs	r3, r1, r3
 8000bdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	617b      	str	r3, [r7, #20]

	if((ret < out_min) && (out_min > out_max)){
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	da05      	bge.n	8000bfa <map+0x4e>
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dd01      	ble.n	8000bfa <map+0x4e>
		return ret;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	e01e      	b.n	8000c38 <map+0x8c>
	}
	else if((ret < out_min) && (out_min < out_max)){
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	da05      	bge.n	8000c0e <map+0x62>
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	da01      	bge.n	8000c0e <map+0x62>
		return out_min;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	e014      	b.n	8000c38 <map+0x8c>
	}
	else if((ret > out_max) && (out_min > out_max)){
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dd05      	ble.n	8000c22 <map+0x76>
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	dd01      	ble.n	8000c22 <map+0x76>
		return ret;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	e00a      	b.n	8000c38 <map+0x8c>
	}
	else if((ret > out_max) && (out_min < out_max)){
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	dd05      	ble.n	8000c36 <map+0x8a>
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	da01      	bge.n	8000c36 <map+0x8a>
		return out_max;
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	e000      	b.n	8000c38 <map+0x8c>
	}
	else{
		return ret;
 8000c36:	697b      	ldr	r3, [r7, #20]
	}

}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	371c      	adds	r7, #28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <getRedPulseWidth>:

static int getRedPulseWidth(void){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08e      	sub	sp, #56	; 0x38
 8000c48:	af02      	add	r7, sp, #8

	// Set Sensor to read Red only
	HAL_GPIO_WritePin(S2Pin_GPIO_Port, S2Pin_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c50:	4835      	ldr	r0, [pc, #212]	; (8000d28 <getRedPulseWidth+0xe4>)
 8000c52:	f000 fe6f 	bl	8001934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3Pin_GPIO_Port, S3Pin_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5c:	4832      	ldr	r0, [pc, #200]	; (8000d28 <getRedPulseWidth+0xe4>)
 8000c5e:	f000 fe69 	bl	8001934 <HAL_GPIO_WritePin>


	const int averagePoints = 25;
 8000c62:	2319      	movs	r3, #25
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
	int avg = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
	char data[32] = {0};
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2220      	movs	r2, #32
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 fa89 	bl	8004188 <memset>

	for(int i = 0; i < averagePoints; ++i){
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c7a:	e048      	b.n	8000d0e <getRedPulseWidth+0xca>

		// Start the input capture in interrupt mode
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	482b      	ldr	r0, [pc, #172]	; (8000d2c <getRedPulseWidth+0xe8>)
 8000c80:	f001 ffca 	bl	8002c18 <HAL_TIM_IC_Start_IT>

		while(!captureDone){}
 8000c84:	bf00      	nop
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <getRedPulseWidth+0xec>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0fa      	beq.n	8000c86 <getRedPulseWidth+0x42>

		colourSensor.redPulseWidth = pulseWidth;
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <getRedPulseWidth+0xf0>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <getRedPulseWidth+0xf4>)
 8000c98:	601a      	str	r2, [r3, #0]

		colourSensor.redValue = map(colourSensor.redPulseWidth, TCS320_RED_MIN,
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <getRedPulseWidth+0xf4>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	2337      	movs	r3, #55	; 0x37
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	23ff      	movs	r3, #255	; 0xff
 8000cae:	f7ff ff7d 	bl	8000bac <map>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <getRedPulseWidth+0xf4>)
 8000cb8:	731a      	strb	r2, [r3, #12]
				TCS320_RED_MAX, 255, 0);

		if(colourSensor.doCalibration){
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <getRedPulseWidth+0xf4>)
 8000cbc:	7bdb      	ldrb	r3, [r3, #15]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d013      	beq.n	8000cea <getRedPulseWidth+0xa6>
			sprintf(data, "rw: %d, rv: %d\r\n", colourSensor.redPulseWidth, colourSensor.redValue);
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <getRedPulseWidth+0xf4>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <getRedPulseWidth+0xf4>)
 8000cc8:	7b1b      	ldrb	r3, [r3, #12]
 8000cca:	1d38      	adds	r0, r7, #4
 8000ccc:	491b      	ldr	r1, [pc, #108]	; (8000d3c <getRedPulseWidth+0xf8>)
 8000cce:	f003 fa63 	bl	8004198 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fab3 	bl	8000240 <strlen>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	1d39      	adds	r1, r7, #4
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	4816      	ldr	r0, [pc, #88]	; (8000d40 <getRedPulseWidth+0xfc>)
 8000ce6:	f002 fd87 	bl	80037f8 <HAL_UART_Transmit>
		}
		avg += colourSensor.redValue;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <getRedPulseWidth+0xf4>)
 8000cec:	7b1b      	ldrb	r3, [r3, #12]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf2:	4413      	add	r3, r2
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c

		captureDone = 0;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <getRedPulseWidth+0xec>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]

		memset(data, '\0', sizeof(data));
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2220      	movs	r2, #32
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 fa40 	bl	8004188 <memset>
	for(int i = 0; i < averagePoints; ++i){
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbb2      	blt.n	8000c7c <getRedPulseWidth+0x38>
	}


	return (int)(avg/averagePoints);
 8000d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	20000144 	.word	0x20000144
 8000d30:	20000098 	.word	0x20000098
 8000d34:	2000009a 	.word	0x2000009a
 8000d38:	2000009c 	.word	0x2000009c
 8000d3c:	080049ec 	.word	0x080049ec
 8000d40:	200000c4 	.word	0x200000c4

08000d44 <getGreenPulseWidth>:

static int getGreenPulseWidth(void){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af02      	add	r7, sp, #8

	// Set Sensor to read Green only
	HAL_GPIO_WritePin(S2Pin_GPIO_Port, S2Pin_Pin, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d50:	4835      	ldr	r0, [pc, #212]	; (8000e28 <getGreenPulseWidth+0xe4>)
 8000d52:	f000 fdef 	bl	8001934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3Pin_GPIO_Port, S3Pin_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5c:	4832      	ldr	r0, [pc, #200]	; (8000e28 <getGreenPulseWidth+0xe4>)
 8000d5e:	f000 fde9 	bl	8001934 <HAL_GPIO_WritePin>

	char data[32] = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2220      	movs	r2, #32
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 fa0d 	bl	8004188 <memset>
	const int averagePoints = 25;
 8000d6e:	2319      	movs	r3, #25
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
	int avg = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c



	for(int i = 0; i < averagePoints; ++i){
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d7a:	e048      	b.n	8000e0e <getGreenPulseWidth+0xca>

		// Start the input capture in interrupt mode
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	482b      	ldr	r0, [pc, #172]	; (8000e2c <getGreenPulseWidth+0xe8>)
 8000d80:	f001 ff4a 	bl	8002c18 <HAL_TIM_IC_Start_IT>

		while(!captureDone){}
 8000d84:	bf00      	nop
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <getGreenPulseWidth+0xec>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0fa      	beq.n	8000d86 <getGreenPulseWidth+0x42>

		colourSensor.greenPulseWidth = pulseWidth;
 8000d90:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <getGreenPulseWidth+0xf0>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <getGreenPulseWidth+0xf4>)
 8000d98:	605a      	str	r2, [r3, #4]

		colourSensor.greenValue = map(colourSensor.greenPulseWidth, TCS320_GREEN_MIN,
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <getGreenPulseWidth+0xf4>)
 8000d9c:	6858      	ldr	r0, [r3, #4]
 8000d9e:	230a      	movs	r3, #10
 8000da0:	4619      	mov	r1, r3
 8000da2:	f240 6354 	movw	r3, #1620	; 0x654
 8000da6:	461a      	mov	r2, r3
 8000da8:	2300      	movs	r3, #0
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	23ff      	movs	r3, #255	; 0xff
 8000dae:	f7ff fefd 	bl	8000bac <map>
 8000db2:	4603      	mov	r3, r0
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <getGreenPulseWidth+0xf4>)
 8000db8:	735a      	strb	r2, [r3, #13]
				TCS320_GREEN_MAX, 255, 0);

		if(colourSensor.doCalibration){
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <getGreenPulseWidth+0xf4>)
 8000dbc:	7bdb      	ldrb	r3, [r3, #15]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d013      	beq.n	8000dea <getGreenPulseWidth+0xa6>
			sprintf(data, "gw: %d, gv: %d\r\n", colourSensor.greenPulseWidth, colourSensor.greenValue);
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <getGreenPulseWidth+0xf4>)
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <getGreenPulseWidth+0xf4>)
 8000dc8:	7b5b      	ldrb	r3, [r3, #13]
 8000dca:	1d38      	adds	r0, r7, #4
 8000dcc:	491b      	ldr	r1, [pc, #108]	; (8000e3c <getGreenPulseWidth+0xf8>)
 8000dce:	f003 f9e3 	bl	8004198 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fa33 	bl	8000240 <strlen>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	1d39      	adds	r1, r7, #4
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	4816      	ldr	r0, [pc, #88]	; (8000e40 <getGreenPulseWidth+0xfc>)
 8000de6:	f002 fd07 	bl	80037f8 <HAL_UART_Transmit>
		}
		avg += colourSensor.greenValue;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <getGreenPulseWidth+0xf4>)
 8000dec:	7b5b      	ldrb	r3, [r3, #13]
 8000dee:	461a      	mov	r2, r3
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	4413      	add	r3, r2
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c

		captureDone = 0;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <getGreenPulseWidth+0xec>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]

		memset(data, '\0', sizeof(data));
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2220      	movs	r2, #32
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 f9c0 	bl	8004188 <memset>
	for(int i = 0; i < averagePoints; ++i){
 8000e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dbb2      	blt.n	8000d7c <getGreenPulseWidth+0x38>
	}

	return (int)(avg/averagePoints);
 8000e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3730      	adds	r7, #48	; 0x30
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	20000144 	.word	0x20000144
 8000e30:	20000098 	.word	0x20000098
 8000e34:	2000009a 	.word	0x2000009a
 8000e38:	2000009c 	.word	0x2000009c
 8000e3c:	08004a00 	.word	0x08004a00
 8000e40:	200000c4 	.word	0x200000c4

08000e44 <getBluePulseWidth>:

static int getBluePulseWidth(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08e      	sub	sp, #56	; 0x38
 8000e48:	af02      	add	r7, sp, #8
	// Set Sensor to read Blue only
	HAL_GPIO_WritePin(S2Pin_GPIO_Port, S2Pin_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e50:	4835      	ldr	r0, [pc, #212]	; (8000f28 <getBluePulseWidth+0xe4>)
 8000e52:	f000 fd6f 	bl	8001934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3Pin_GPIO_Port, S3Pin_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5c:	4832      	ldr	r0, [pc, #200]	; (8000f28 <getBluePulseWidth+0xe4>)
 8000e5e:	f000 fd69 	bl	8001934 <HAL_GPIO_WritePin>

	char data[32] = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2220      	movs	r2, #32
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 f98d 	bl	8004188 <memset>
	const int averagePoints = 25;
 8000e6e:	2319      	movs	r3, #25
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
	int avg = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c


	for(int i = 0; i < averagePoints; ++i){
 8000e76:	2300      	movs	r3, #0
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e7a:	e048      	b.n	8000f0e <getBluePulseWidth+0xca>

		// Start the input capture in interrupt mode
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	482b      	ldr	r0, [pc, #172]	; (8000f2c <getBluePulseWidth+0xe8>)
 8000e80:	f001 feca 	bl	8002c18 <HAL_TIM_IC_Start_IT>

		while(!captureDone){}
 8000e84:	bf00      	nop
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <getBluePulseWidth+0xec>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0fa      	beq.n	8000e86 <getBluePulseWidth+0x42>

		colourSensor.bluePulseWidth = pulseWidth;
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <getBluePulseWidth+0xf0>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <getBluePulseWidth+0xf4>)
 8000e98:	609a      	str	r2, [r3, #8]

		colourSensor.blueValue = map(colourSensor.bluePulseWidth, TCS320_BLUE_MIN,
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <getBluePulseWidth+0xf4>)
 8000e9c:	6898      	ldr	r0, [r3, #8]
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	23ff      	movs	r3, #255	; 0xff
 8000eae:	f7ff fe7d 	bl	8000bac <map>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <getBluePulseWidth+0xf4>)
 8000eb8:	739a      	strb	r2, [r3, #14]
				TCS320_BLUE_MAX, 255, 0);

		if(colourSensor.doCalibration){
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <getBluePulseWidth+0xf4>)
 8000ebc:	7bdb      	ldrb	r3, [r3, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d013      	beq.n	8000eea <getBluePulseWidth+0xa6>
			sprintf(data, "bw: %d, bv: %d\r\n", colourSensor.bluePulseWidth, colourSensor.blueValue);
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <getBluePulseWidth+0xf4>)
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <getBluePulseWidth+0xf4>)
 8000ec8:	7b9b      	ldrb	r3, [r3, #14]
 8000eca:	1d38      	adds	r0, r7, #4
 8000ecc:	491b      	ldr	r1, [pc, #108]	; (8000f3c <getBluePulseWidth+0xf8>)
 8000ece:	f003 f963 	bl	8004198 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff f9b3 	bl	8000240 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	1d39      	adds	r1, r7, #4
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	4816      	ldr	r0, [pc, #88]	; (8000f40 <getBluePulseWidth+0xfc>)
 8000ee6:	f002 fc87 	bl	80037f8 <HAL_UART_Transmit>
		}
		avg += colourSensor.blueValue;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <getBluePulseWidth+0xf4>)
 8000eec:	7b9b      	ldrb	r3, [r3, #14]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef2:	4413      	add	r3, r2
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
		captureDone = 0;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <getBluePulseWidth+0xec>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]

		memset(data, '\0', sizeof(data));
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2220      	movs	r2, #32
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 f940 	bl	8004188 <memset>
	for(int i = 0; i < averagePoints; ++i){
 8000f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dbb2      	blt.n	8000e7c <getBluePulseWidth+0x38>
	}

	return (int)(avg/averagePoints);
 8000f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3730      	adds	r7, #48	; 0x30
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	20000144 	.word	0x20000144
 8000f30:	20000098 	.word	0x20000098
 8000f34:	2000009a 	.word	0x2000009a
 8000f38:	2000009c 	.word	0x2000009c
 8000f3c:	08004a14 	.word	0x08004a14
 8000f40:	200000c4 	.word	0x200000c4

08000f44 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7f1b      	ldrb	r3, [r3, #28]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d144      	bne.n	8000fde <HAL_TIM_IC_CaptureCallback+0x9a>

		if(isRisingEdge){ // rising edge
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00a      	beq.n	8000f72 <HAL_TIM_IC_CaptureCallback+0x2e>
			captures[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f002 f8f4 	bl	800314c <HAL_TIM_ReadCapturedValue>
 8000f64:	4602      	mov	r2, r0
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f68:	601a      	str	r2, [r3, #0]
			isRisingEdge = 0;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
			// Stop the input capture in interrupt mode
			HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);

		}
	}
}
 8000f70:	e035      	b.n	8000fde <HAL_TIM_IC_CaptureCallback+0x9a>
			captures[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f72:	2100      	movs	r1, #0
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f002 f8e9 	bl	800314c <HAL_TIM_ReadCapturedValue>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f7e:	605a      	str	r2, [r3, #4]
			isRisingEdge = 1;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
			if(captures[1] >= captures[0]){
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d30a      	bcc.n	8000fb0 <HAL_TIM_IC_CaptureCallback+0x6c>
				pulseWidth = captures[1] - captures[0];
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000fac:	801a      	strh	r2, [r3, #0]
 8000fae:	e00f      	b.n	8000fd0 <HAL_TIM_IC_CaptureCallback+0x8c>
				pulseWidth = (htim->Instance->ARR - captures[0]) + captures[1];
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4413      	add	r3, r2
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000fce:	801a      	strh	r2, [r3, #0]
			captureDone = 1;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000fda:	f001 fe8b 	bl	8002cf4 <HAL_TIM_IC_Stop_IT>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000090 	.word	0x20000090
 8000ff0:	2000009a 	.word	0x2000009a
 8000ff4:	20000098 	.word	0x20000098
 8000ff8:	20000144 	.word	0x20000144

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001002:	e7fe      	b.n	8001002 <Error_Handler+0x6>

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_MspInit+0x44>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_MspInit+0x44>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_MspInit+0x44>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_MspInit+0x44>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_MspInit+0x44>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_MspInit+0x44>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <HAL_TIM_IC_MspInit+0x8c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12f      	bne.n	80010ce <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_TIM_IC_MspInit+0x90>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <HAL_TIM_IC_MspInit+0x90>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_TIM_IC_MspInit+0x90>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_TIM_IC_MspInit+0x90>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a14      	ldr	r2, [pc, #80]	; (80010dc <HAL_TIM_IC_MspInit+0x90>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_TIM_IC_MspInit+0x90>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH1_FreqOutPin_Pin;
 800109e:	2340      	movs	r3, #64	; 0x40
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ae:	2302      	movs	r3, #2
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_CH1_FreqOutPin_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4809      	ldr	r0, [pc, #36]	; (80010e0 <HAL_TIM_IC_MspInit+0x94>)
 80010ba:	f000 fa91 	bl	80015e0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	201d      	movs	r0, #29
 80010c4:	f000 fa55 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010c8:	201d      	movs	r0, #29
 80010ca:	f000 fa6e 	bl	80015aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40000400 	.word	0x40000400
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_UART_MspInit+0x7c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d128      	bne.n	8001158 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_UART_MspInit+0x80>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a16      	ldr	r2, [pc, #88]	; (8001164 <HAL_UART_MspInit+0x80>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_UART_MspInit+0x80>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_UART_MspInit+0x80>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_UART_MspInit+0x80>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_UART_MspInit+0x80>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001136:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001148:	2307      	movs	r3, #7
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_UART_MspInit+0x84>)
 8001154:	f000 fa44 	bl	80015e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40004800 	.word	0x40004800
 8001164:	40023800 	.word	0x40023800
 8001168:	40020c00 	.word	0x40020c00

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <NMI_Handler+0x4>

08001172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <MemManage_Handler+0x4>

0800117e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <UsageFault_Handler+0x4>

0800118a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b8:	f000 f8be 	bl	8001338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}

080011c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <TIM3_IRQHandler+0x10>)
 80011c6:	f001 fe05 	bl	8002dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000144 	.word	0x20000144

080011d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <_sbrk+0x5c>)
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <_sbrk+0x60>)
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <_sbrk+0x64>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <_sbrk+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	429a      	cmp	r2, r3
 8001202:	d207      	bcs.n	8001214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001204:	f002 ff96 	bl	8004134 <__errno>
 8001208:	4602      	mov	r2, r0
 800120a:	230c      	movs	r3, #12
 800120c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e009      	b.n	8001228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <_sbrk+0x64>)
 8001224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20080000 	.word	0x20080000
 8001234:	00000400 	.word	0x00000400
 8001238:	200000b8 	.word	0x200000b8
 800123c:	20000190 	.word	0x20000190

08001240 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <SystemInit+0x28>)
 8001246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <SystemInit+0x28>)
 800124c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SystemInit+0x28>)
 8001256:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125a:	609a      	str	r2, [r3, #8]
#endif
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001270:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001272:	e003      	b.n	800127c <LoopCopyDataInit>

08001274 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001276:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001278:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800127a:	3104      	adds	r1, #4

0800127c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001280:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001282:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001284:	d3f6      	bcc.n	8001274 <CopyDataInit>
  ldr  r2, =_sbss
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001288:	e002      	b.n	8001290 <LoopFillZerobss>

0800128a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800128a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800128c:	f842 3b04 	str.w	r3, [r2], #4

08001290 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001292:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001294:	d3f9      	bcc.n	800128a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001296:	f7ff ffd3 	bl	8001240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129a:	f002 ff51 	bl	8004140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff f9a7 	bl	80005f0 <main>
  bx  lr    
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80012a8:	08004a84 	.word	0x08004a84
  ldr  r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012b0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80012b4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80012b8:	2000018c 	.word	0x2000018c

080012bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>

080012be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c2:	2003      	movs	r0, #3
 80012c4:	f000 f94a 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 f805 	bl	80012d8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012ce:	f7ff fe99 	bl	8001004 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x54>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x58>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f965 	bl	80015c6 <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00e      	b.n	8001324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d80a      	bhi.n	8001322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f000 f92d 	bl	8001572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_InitTick+0x5c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e000      	b.n	8001324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000004 	.word	0x20000004
 8001330:	2000000c 	.word	0x2000000c
 8001334:	20000008 	.word	0x20000008

08001338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x20>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x24>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_IncTick+0x24>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2000000c 	.word	0x2000000c
 800135c:	20000184 	.word	0x20000184

08001360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetTick+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000184 	.word	0x20000184

08001378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff ffee 	bl	8001360 <HAL_GetTick>
 8001384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d005      	beq.n	800139e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_Delay+0x40>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139e:	bf00      	nop
 80013a0:	f7ff ffde 	bl	8001360 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8f7      	bhi.n	80013a0 <HAL_Delay+0x28>
  {
  }
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000000c 	.word	0x2000000c

080013bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <__NVIC_SetPriorityGrouping+0x40>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x40>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00
 8001400:	05fa0000 	.word	0x05fa0000

08001404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f7ff ff8e 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff29 	bl	80013bc <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff3e 	bl	8001404 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff8e 	bl	80014b0 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5d 	bl	800145c <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff31 	bl	8001420 <__NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffa2 	bl	8001518 <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	e175      	b.n	80018ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001600:	2201      	movs	r2, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	429a      	cmp	r2, r3
 800161a:	f040 8164 	bne.w	80018e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d00b      	beq.n	800163e <HAL_GPIO_Init+0x5e>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d007      	beq.n	800163e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001632:	2b11      	cmp	r3, #17
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b12      	cmp	r3, #18
 800163c:	d130      	bne.n	80016a0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001674:	2201      	movs	r2, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 0201 	and.w	r2, r3, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x100>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b12      	cmp	r3, #18
 80016de:	d123      	bne.n	8001728 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	08da      	lsrs	r2, r3, #3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3208      	adds	r2, #8
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	69b9      	ldr	r1, [r7, #24]
 8001724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0203 	and.w	r2, r3, #3
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80be 	beq.w	80018e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	4b65      	ldr	r3, [pc, #404]	; (8001900 <HAL_GPIO_Init+0x320>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a64      	ldr	r2, [pc, #400]	; (8001900 <HAL_GPIO_Init+0x320>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b62      	ldr	r3, [pc, #392]	; (8001900 <HAL_GPIO_Init+0x320>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001782:	4a60      	ldr	r2, [pc, #384]	; (8001904 <HAL_GPIO_Init+0x324>)
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a57      	ldr	r2, [pc, #348]	; (8001908 <HAL_GPIO_Init+0x328>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d037      	beq.n	800181e <HAL_GPIO_Init+0x23e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a56      	ldr	r2, [pc, #344]	; (800190c <HAL_GPIO_Init+0x32c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d031      	beq.n	800181a <HAL_GPIO_Init+0x23a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a55      	ldr	r2, [pc, #340]	; (8001910 <HAL_GPIO_Init+0x330>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d02b      	beq.n	8001816 <HAL_GPIO_Init+0x236>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a54      	ldr	r2, [pc, #336]	; (8001914 <HAL_GPIO_Init+0x334>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d025      	beq.n	8001812 <HAL_GPIO_Init+0x232>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a53      	ldr	r2, [pc, #332]	; (8001918 <HAL_GPIO_Init+0x338>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d01f      	beq.n	800180e <HAL_GPIO_Init+0x22e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_GPIO_Init+0x33c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d019      	beq.n	800180a <HAL_GPIO_Init+0x22a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a51      	ldr	r2, [pc, #324]	; (8001920 <HAL_GPIO_Init+0x340>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_GPIO_Init+0x226>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a50      	ldr	r2, [pc, #320]	; (8001924 <HAL_GPIO_Init+0x344>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d00d      	beq.n	8001802 <HAL_GPIO_Init+0x222>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4f      	ldr	r2, [pc, #316]	; (8001928 <HAL_GPIO_Init+0x348>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d007      	beq.n	80017fe <HAL_GPIO_Init+0x21e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4e      	ldr	r2, [pc, #312]	; (800192c <HAL_GPIO_Init+0x34c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_GPIO_Init+0x21a>
 80017f6:	2309      	movs	r3, #9
 80017f8:	e012      	b.n	8001820 <HAL_GPIO_Init+0x240>
 80017fa:	230a      	movs	r3, #10
 80017fc:	e010      	b.n	8001820 <HAL_GPIO_Init+0x240>
 80017fe:	2308      	movs	r3, #8
 8001800:	e00e      	b.n	8001820 <HAL_GPIO_Init+0x240>
 8001802:	2307      	movs	r3, #7
 8001804:	e00c      	b.n	8001820 <HAL_GPIO_Init+0x240>
 8001806:	2306      	movs	r3, #6
 8001808:	e00a      	b.n	8001820 <HAL_GPIO_Init+0x240>
 800180a:	2305      	movs	r3, #5
 800180c:	e008      	b.n	8001820 <HAL_GPIO_Init+0x240>
 800180e:	2304      	movs	r3, #4
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x240>
 8001812:	2303      	movs	r3, #3
 8001814:	e004      	b.n	8001820 <HAL_GPIO_Init+0x240>
 8001816:	2302      	movs	r3, #2
 8001818:	e002      	b.n	8001820 <HAL_GPIO_Init+0x240>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_GPIO_Init+0x240>
 800181e:	2300      	movs	r3, #0
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	f002 0203 	and.w	r2, r2, #3
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4093      	lsls	r3, r2
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001830:	4934      	ldr	r1, [pc, #208]	; (8001904 <HAL_GPIO_Init+0x324>)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <HAL_GPIO_Init+0x350>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001862:	4a33      	ldr	r2, [pc, #204]	; (8001930 <HAL_GPIO_Init+0x350>)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_GPIO_Init+0x350>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800188c:	4a28      	ldr	r2, [pc, #160]	; (8001930 <HAL_GPIO_Init+0x350>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_GPIO_Init+0x350>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018b6:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <HAL_GPIO_Init+0x350>)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_GPIO_Init+0x350>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e0:	4a13      	ldr	r2, [pc, #76]	; (8001930 <HAL_GPIO_Init+0x350>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3301      	adds	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b0f      	cmp	r3, #15
 80018f0:	f67f ae86 	bls.w	8001600 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018f4:	bf00      	nop
 80018f6:	3724      	adds	r7, #36	; 0x24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40023800 	.word	0x40023800
 8001904:	40013800 	.word	0x40013800
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400
 8001910:	40020800 	.word	0x40020800
 8001914:	40020c00 	.word	0x40020c00
 8001918:	40021000 	.word	0x40021000
 800191c:	40021400 	.word	0x40021400
 8001920:	40021800 	.word	0x40021800
 8001924:	40021c00 	.word	0x40021c00
 8001928:	40022000 	.word	0x40022000
 800192c:	40022400 	.word	0x40022400
 8001930:	40013c00 	.word	0x40013c00

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001950:	e003      	b.n	800195a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	619a      	str	r2, [r3, #24]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40007000 	.word	0x40007000

08001988 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_PWREx_EnableOverDrive+0x98>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a22      	ldr	r2, [pc, #136]	; (8001a20 <HAL_PWREx_EnableOverDrive+0x98>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_PWREx_EnableOverDrive+0x98>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b6:	f7ff fcd3 	bl	8001360 <HAL_GetTick>
 80019ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019bc:	e009      	b.n	80019d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019be:	f7ff fccf 	bl	8001360 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019cc:	d901      	bls.n	80019d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e022      	b.n	8001a18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019de:	d1ee      	bne.n	80019be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ec:	f7ff fcb8 	bl	8001360 <HAL_GetTick>
 80019f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019f2:	e009      	b.n	8001a08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019f4:	f7ff fcb4 	bl	8001360 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a02:	d901      	bls.n	8001a08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e007      	b.n	8001a18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a14:	d1ee      	bne.n	80019f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e29b      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8087 	beq.w	8001b5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a4c:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d00c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a58:	4b93      	ldr	r3, [pc, #588]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d112      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62>
 8001a64:	4b90      	ldr	r3, [pc, #576]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a70:	d10b      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a72:	4b8d      	ldr	r3, [pc, #564]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d06c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x130>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d168      	bne.n	8001b58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e275      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x7a>
 8001a94:	4b84      	ldr	r3, [pc, #528]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a83      	ldr	r2, [pc, #524]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e02e      	b.n	8001b00 <HAL_RCC_OscConfig+0xd8>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x9c>
 8001aaa:	4b7f      	ldr	r3, [pc, #508]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7e      	ldr	r2, [pc, #504]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b7c      	ldr	r3, [pc, #496]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a7b      	ldr	r2, [pc, #492]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e01d      	b.n	8001b00 <HAL_RCC_OscConfig+0xd8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xc0>
 8001ace:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a75      	ldr	r2, [pc, #468]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b73      	ldr	r3, [pc, #460]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a72      	ldr	r2, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0xd8>
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6e      	ldr	r2, [pc, #440]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b6c      	ldr	r3, [pc, #432]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a6b      	ldr	r2, [pc, #428]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fc2a 	bl	8001360 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff fc26 	bl	8001360 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e229      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b61      	ldr	r3, [pc, #388]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0xe8>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff fc16 	bl	8001360 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff fc12 	bl	8001360 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e215      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	4b57      	ldr	r3, [pc, #348]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x110>
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d069      	beq.n	8001c3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b66:	4b50      	ldr	r3, [pc, #320]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b72:	4b4d      	ldr	r3, [pc, #308]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d11c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x190>
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d116      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x17a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e1e9      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	493d      	ldr	r1, [pc, #244]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	e040      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d023      	beq.n	8001c08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a38      	ldr	r2, [pc, #224]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fbc8 	bl	8001360 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fbc4 	bl	8001360 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1c7      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4929      	ldr	r1, [pc, #164]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
 8001c06:	e018      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c08:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a26      	ldr	r2, [pc, #152]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fba4 	bl	8001360 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fba0 	bl	8001360 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e1a3      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d038      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d019      	beq.n	8001c82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c52:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fb81 	bl	8001360 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c62:	f7ff fb7d 	bl	8001360 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e180      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x23a>
 8001c80:	e01a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fb67 	bl	8001360 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff fb63 	bl	8001360 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d903      	bls.n	8001cac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e166      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
 8001ca8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	4b92      	ldr	r3, [pc, #584]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1ee      	bne.n	8001c96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80a4 	beq.w	8001e0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b8c      	ldr	r3, [pc, #560]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10d      	bne.n	8001cee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a88      	ldr	r2, [pc, #544]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b86      	ldr	r3, [pc, #536]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cea:	2301      	movs	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cee:	4b83      	ldr	r3, [pc, #524]	; (8001efc <HAL_RCC_OscConfig+0x4d4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d118      	bne.n	8001d2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001cfa:	4b80      	ldr	r3, [pc, #512]	; (8001efc <HAL_RCC_OscConfig+0x4d4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7f      	ldr	r2, [pc, #508]	; (8001efc <HAL_RCC_OscConfig+0x4d4>)
 8001d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d06:	f7ff fb2b 	bl	8001360 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0e:	f7ff fb27 	bl	8001360 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b64      	cmp	r3, #100	; 0x64
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e12a      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d20:	4b76      	ldr	r3, [pc, #472]	; (8001efc <HAL_RCC_OscConfig+0x4d4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x31a>
 8001d34:	4b70      	ldr	r3, [pc, #448]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	4a6f      	ldr	r2, [pc, #444]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d40:	e02d      	b.n	8001d9e <HAL_RCC_OscConfig+0x376>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x33c>
 8001d4a:	4b6b      	ldr	r3, [pc, #428]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	4a6a      	ldr	r2, [pc, #424]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6713      	str	r3, [r2, #112]	; 0x70
 8001d56:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	4a67      	ldr	r2, [pc, #412]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6713      	str	r3, [r2, #112]	; 0x70
 8001d62:	e01c      	b.n	8001d9e <HAL_RCC_OscConfig+0x376>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d10c      	bne.n	8001d86 <HAL_RCC_OscConfig+0x35e>
 8001d6c:	4b62      	ldr	r3, [pc, #392]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a61      	ldr	r2, [pc, #388]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
 8001d78:	4b5f      	ldr	r3, [pc, #380]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a5e      	ldr	r2, [pc, #376]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
 8001d84:	e00b      	b.n	8001d9e <HAL_RCC_OscConfig+0x376>
 8001d86:	4b5c      	ldr	r3, [pc, #368]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	4a5b      	ldr	r2, [pc, #364]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6713      	str	r3, [r2, #112]	; 0x70
 8001d92:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d015      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da6:	f7ff fadb 	bl	8001360 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7ff fad7 	bl	8001360 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e0d8      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ee      	beq.n	8001dae <HAL_RCC_OscConfig+0x386>
 8001dd0:	e014      	b.n	8001dfc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fac5 	bl	8001360 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7ff fac1 	bl	8001360 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0c2      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1ee      	bne.n	8001dda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e02:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a3c      	ldr	r2, [pc, #240]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80ae 	beq.w	8001f74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e18:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d06d      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d14b      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2c:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a31      	ldr	r2, [pc, #196]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fa92 	bl	8001360 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff fa8e 	bl	8001360 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e091      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	019b      	lsls	r3, r3, #6
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	3b01      	subs	r3, #1
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	071b      	lsls	r3, r3, #28
 8001e8a:	491b      	ldr	r1, [pc, #108]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fa60 	bl	8001360 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff fa5c 	bl	8001360 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e05f      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x47c>
 8001ec2:	e057      	b.n	8001f74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fa46 	bl	8001360 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7ff fa42 	bl	8001360 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e045      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4b0>
 8001ef6:	e03d      	b.n	8001f74 <HAL_RCC_OscConfig+0x54c>
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <HAL_RCC_OscConfig+0x558>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d030      	beq.n	8001f70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d129      	bne.n	8001f70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d122      	bne.n	8001f70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f30:	4013      	ands	r3, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d119      	bne.n	8001f70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	085b      	lsrs	r3, r3, #1
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d10f      	bne.n	8001f70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800

08001f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0d0      	b.n	800213e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d910      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 020f 	bic.w	r2, r3, #15
 8001fb2:	4965      	ldr	r1, [pc, #404]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b8      	b.n	800213e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8001fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffc:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002006:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	494d      	ldr	r1, [pc, #308]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d040      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d115      	bne.n	8002066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e073      	b.n	800213e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06b      	b.n	800213e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4936      	ldr	r1, [pc, #216]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002078:	f7ff f972 	bl	8001360 <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	e00a      	b.n	8002096 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7ff f96e 	bl	8001360 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e053      	b.n	800213e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 020c 	and.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1eb      	bne.n	8002080 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d210      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 020f 	bic.w	r2, r3, #15
 80020be:	4922      	ldr	r1, [pc, #136]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e032      	b.n	800213e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4916      	ldr	r1, [pc, #88]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	490e      	ldr	r1, [pc, #56]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002116:	f000 f821 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800211a:	4601      	mov	r1, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x1cc>)
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	fa21 f303 	lsr.w	r3, r1, r3
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1d0>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1d4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff f8ce 	bl	80012d8 <HAL_InitTick>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023c00 	.word	0x40023c00
 800214c:	40023800 	.word	0x40023800
 8002150:	08004a28 	.word	0x08004a28
 8002154:	20000004 	.word	0x20000004
 8002158:	20000008 	.word	0x20000008

0800215c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d007      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x32>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d008      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x38>
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 80b4 	bne.w	80022f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4b5e      	ldr	r3, [pc, #376]	; (8002304 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800218a:	60bb      	str	r3, [r7, #8]
      break;
 800218c:	e0b3      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800218e:	4b5e      	ldr	r3, [pc, #376]	; (8002308 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002190:	60bb      	str	r3, [r7, #8]
      break;
 8002192:	e0b0      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002194:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800219c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800219e:	4b58      	ldr	r3, [pc, #352]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d04a      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021aa:	4b55      	ldr	r3, [pc, #340]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	f04f 0400 	mov.w	r4, #0
 80021b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	ea03 0501 	and.w	r5, r3, r1
 80021c0:	ea04 0602 	and.w	r6, r4, r2
 80021c4:	4629      	mov	r1, r5
 80021c6:	4632      	mov	r2, r6
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	f04f 0400 	mov.w	r4, #0
 80021d0:	0154      	lsls	r4, r2, #5
 80021d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021d6:	014b      	lsls	r3, r1, #5
 80021d8:	4619      	mov	r1, r3
 80021da:	4622      	mov	r2, r4
 80021dc:	1b49      	subs	r1, r1, r5
 80021de:	eb62 0206 	sbc.w	r2, r2, r6
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	f04f 0400 	mov.w	r4, #0
 80021ea:	0194      	lsls	r4, r2, #6
 80021ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021f0:	018b      	lsls	r3, r1, #6
 80021f2:	1a5b      	subs	r3, r3, r1
 80021f4:	eb64 0402 	sbc.w	r4, r4, r2
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	00e2      	lsls	r2, r4, #3
 8002202:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002206:	00d9      	lsls	r1, r3, #3
 8002208:	460b      	mov	r3, r1
 800220a:	4614      	mov	r4, r2
 800220c:	195b      	adds	r3, r3, r5
 800220e:	eb44 0406 	adc.w	r4, r4, r6
 8002212:	f04f 0100 	mov.w	r1, #0
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	0262      	lsls	r2, r4, #9
 800221c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002220:	0259      	lsls	r1, r3, #9
 8002222:	460b      	mov	r3, r1
 8002224:	4614      	mov	r4, r2
 8002226:	4618      	mov	r0, r3
 8002228:	4621      	mov	r1, r4
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f04f 0400 	mov.w	r4, #0
 8002230:	461a      	mov	r2, r3
 8002232:	4623      	mov	r3, r4
 8002234:	f7fe f85c 	bl	80002f0 <__aeabi_uldivmod>
 8002238:	4603      	mov	r3, r0
 800223a:	460c      	mov	r4, r1
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e049      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002240:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	f04f 0400 	mov.w	r4, #0
 800224a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	ea03 0501 	and.w	r5, r3, r1
 8002256:	ea04 0602 	and.w	r6, r4, r2
 800225a:	4629      	mov	r1, r5
 800225c:	4632      	mov	r2, r6
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	f04f 0400 	mov.w	r4, #0
 8002266:	0154      	lsls	r4, r2, #5
 8002268:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800226c:	014b      	lsls	r3, r1, #5
 800226e:	4619      	mov	r1, r3
 8002270:	4622      	mov	r2, r4
 8002272:	1b49      	subs	r1, r1, r5
 8002274:	eb62 0206 	sbc.w	r2, r2, r6
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	f04f 0400 	mov.w	r4, #0
 8002280:	0194      	lsls	r4, r2, #6
 8002282:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002286:	018b      	lsls	r3, r1, #6
 8002288:	1a5b      	subs	r3, r3, r1
 800228a:	eb64 0402 	sbc.w	r4, r4, r2
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	00e2      	lsls	r2, r4, #3
 8002298:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800229c:	00d9      	lsls	r1, r3, #3
 800229e:	460b      	mov	r3, r1
 80022a0:	4614      	mov	r4, r2
 80022a2:	195b      	adds	r3, r3, r5
 80022a4:	eb44 0406 	adc.w	r4, r4, r6
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	02a2      	lsls	r2, r4, #10
 80022b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022b6:	0299      	lsls	r1, r3, #10
 80022b8:	460b      	mov	r3, r1
 80022ba:	4614      	mov	r4, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	4621      	mov	r1, r4
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f04f 0400 	mov.w	r4, #0
 80022c6:	461a      	mov	r2, r3
 80022c8:	4623      	mov	r3, r4
 80022ca:	f7fe f811 	bl	80002f0 <__aeabi_uldivmod>
 80022ce:	4603      	mov	r3, r0
 80022d0:	460c      	mov	r4, r1
 80022d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	3301      	adds	r3, #1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	60bb      	str	r3, [r7, #8]
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022f2:	60bb      	str	r3, [r7, #8]
      break;
 80022f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f6:	68bb      	ldr	r3, [r7, #8]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002300:	40023800 	.word	0x40023800
 8002304:	00f42400 	.word	0x00f42400
 8002308:	007a1200 	.word	0x007a1200

0800230c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_GetHCLKFreq+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000004 	.word	0x20000004

08002324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002328:	f7ff fff0 	bl	800230c <HAL_RCC_GetHCLKFreq>
 800232c:	4601      	mov	r1, r0
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	0a9b      	lsrs	r3, r3, #10
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4a03      	ldr	r2, [pc, #12]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40023800 	.word	0x40023800
 8002348:	08004a38 	.word	0x08004a38

0800234c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002350:	f7ff ffdc 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8002354:	4601      	mov	r1, r0
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	0b5b      	lsrs	r3, r3, #13
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4a03      	ldr	r2, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002362:	5cd3      	ldrb	r3, [r2, r3]
 8002364:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	08004a38 	.word	0x08004a38

08002374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d012      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800239c:	4b69      	ldr	r3, [pc, #420]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a68      	ldr	r2, [pc, #416]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023a6:	6093      	str	r3, [r2, #8]
 80023a8:	4b66      	ldr	r3, [pc, #408]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b0:	4964      	ldr	r1, [pc, #400]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80023be:	2301      	movs	r3, #1
 80023c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d017      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	4959      	ldr	r1, [pc, #356]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ec:	d101      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d017      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800240a:	4b4e      	ldr	r3, [pc, #312]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002410:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	494a      	ldr	r1, [pc, #296]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002428:	d101      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002436:	2301      	movs	r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002446:	2301      	movs	r3, #1
 8002448:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 808b 	beq.w	800256e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	4b3a      	ldr	r3, [pc, #232]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	4a39      	ldr	r2, [pc, #228]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002462:	6413      	str	r3, [r2, #64]	; 0x40
 8002464:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002470:	4b35      	ldr	r3, [pc, #212]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a34      	ldr	r2, [pc, #208]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800247c:	f7fe ff70 	bl	8001360 <HAL_GetTick>
 8002480:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002484:	f7fe ff6c 	bl	8001360 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e38d      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002496:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024a2:	4b28      	ldr	r3, [pc, #160]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d035      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d02e      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	4a1a      	ldr	r2, [pc, #104]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024e2:	4a18      	ldr	r2, [pc, #96]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d114      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe ff34 	bl	8001360 <HAL_GetTick>
 80024f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fa:	e00a      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7fe ff30 	bl	8001360 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e34f      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0ee      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800252a:	d111      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800253a:	400b      	ands	r3, r1
 800253c:	4901      	ldr	r1, [pc, #4]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
 8002542:	e00b      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002544:	40023800 	.word	0x40023800
 8002548:	40007000 	.word	0x40007000
 800254c:	0ffffcff 	.word	0x0ffffcff
 8002550:	4bb3      	ldr	r3, [pc, #716]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4ab2      	ldr	r2, [pc, #712]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002556:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800255a:	6093      	str	r3, [r2, #8]
 800255c:	4bb0      	ldr	r3, [pc, #704]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800255e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	49ad      	ldr	r1, [pc, #692]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800256a:	4313      	orrs	r3, r2
 800256c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d010      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800257a:	4ba9      	ldr	r3, [pc, #676]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800257c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002580:	4aa7      	ldr	r2, [pc, #668]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002586:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800258a:	4ba5      	ldr	r3, [pc, #660]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	49a2      	ldr	r1, [pc, #648]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025a8:	4b9d      	ldr	r3, [pc, #628]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b6:	499a      	ldr	r1, [pc, #616]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025ca:	4b95      	ldr	r3, [pc, #596]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d8:	4991      	ldr	r1, [pc, #580]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025ec:	4b8c      	ldr	r3, [pc, #560]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025fa:	4989      	ldr	r1, [pc, #548]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800260e:	4b84      	ldr	r3, [pc, #528]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002614:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4980      	ldr	r1, [pc, #512]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002630:	4b7b      	ldr	r3, [pc, #492]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f023 0203 	bic.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4978      	ldr	r1, [pc, #480]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002652:	4b73      	ldr	r3, [pc, #460]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	f023 020c 	bic.w	r2, r3, #12
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002660:	496f      	ldr	r1, [pc, #444]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002674:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	4967      	ldr	r1, [pc, #412]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002696:	4b62      	ldr	r3, [pc, #392]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a4:	495e      	ldr	r1, [pc, #376]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	4956      	ldr	r1, [pc, #344]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026da:	4b51      	ldr	r3, [pc, #324]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	494d      	ldr	r1, [pc, #308]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026fc:	4b48      	ldr	r3, [pc, #288]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	4945      	ldr	r1, [pc, #276]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800271e:	4b40      	ldr	r3, [pc, #256]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272c:	493c      	ldr	r1, [pc, #240]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002740:	4b37      	ldr	r3, [pc, #220]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800274e:	4934      	ldr	r1, [pc, #208]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d011      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002762:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002770:	492b      	ldr	r1, [pc, #172]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800277c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002780:	d101      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002782:	2301      	movs	r3, #1
 8002784:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002792:	2301      	movs	r3, #1
 8002794:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027a2:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b0:	491b      	ldr	r1, [pc, #108]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00b      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027d4:	4912      	ldr	r1, [pc, #72]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f8:	4909      	ldr	r1, [pc, #36]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00f      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800280e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002812:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	e002      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	4985      	ldr	r1, [pc, #532]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002838:	4b80      	ldr	r3, [pc, #512]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800283a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800283e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002848:	497c      	ldr	r1, [pc, #496]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d005      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800285e:	f040 80d6 	bne.w	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002862:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a75      	ldr	r2, [pc, #468]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002868:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800286c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286e:	f7fe fd77 	bl	8001360 <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002876:	f7fe fd73 	bl	8001360 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b64      	cmp	r3, #100	; 0x64
 8002882:	d901      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e194      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002888:	4b6c      	ldr	r3, [pc, #432]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d021      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11d      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028a8:	4b64      	ldr	r3, [pc, #400]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ae:	0c1b      	lsrs	r3, r3, #16
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028b6:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028bc:	0e1b      	lsrs	r3, r3, #24
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	019a      	lsls	r2, r3, #6
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	071b      	lsls	r3, r3, #28
 80028dc:	4957      	ldr	r1, [pc, #348]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x586>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002902:	2b00      	cmp	r3, #0
 8002904:	d02e      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800290e:	d129      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002910:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002924:	0f1b      	lsrs	r3, r3, #28
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	019a      	lsls	r2, r3, #6
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	431a      	orrs	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	071b      	lsls	r3, r3, #28
 8002944:	493d      	ldr	r1, [pc, #244]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800294c:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800294e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002952:	f023 021f 	bic.w	r2, r3, #31
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	3b01      	subs	r3, #1
 800295c:	4937      	ldr	r1, [pc, #220]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01d      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002970:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002976:	0e1b      	lsrs	r3, r3, #24
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800297e:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002984:	0f1b      	lsrs	r3, r3, #28
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	019a      	lsls	r2, r3, #6
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	041b      	lsls	r3, r3, #16
 8002998:	431a      	orrs	r2, r3
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	431a      	orrs	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	071b      	lsls	r3, r3, #28
 80029a4:	4925      	ldr	r1, [pc, #148]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d011      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	019a      	lsls	r2, r3, #6
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	071b      	lsls	r3, r3, #28
 80029d4:	4919      	ldr	r1, [pc, #100]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a16      	ldr	r2, [pc, #88]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e8:	f7fe fcba 	bl	8001360 <HAL_GetTick>
 80029ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029f0:	f7fe fcb6 	bl	8001360 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0d7      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	f040 80cd 	bne.w	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a08      	ldr	r2, [pc, #32]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a22:	f7fe fc9d 	bl	8001360 <HAL_GetTick>
 8002a26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a2a:	f7fe fc99 	bl	8001360 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b64      	cmp	r3, #100	; 0x64
 8002a36:	d903      	bls.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0ba      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002a3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a40:	4b5e      	ldr	r3, [pc, #376]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4c:	d0ed      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d02e      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d12a      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a84:	4b4d      	ldr	r3, [pc, #308]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	0f1b      	lsrs	r3, r3, #28
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	019a      	lsls	r2, r3, #6
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	041b      	lsls	r3, r3, #16
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	061b      	lsls	r3, r3, #24
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	071b      	lsls	r3, r3, #28
 8002aaa:	4944      	ldr	r1, [pc, #272]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ab2:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	493d      	ldr	r1, [pc, #244]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d022      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae0:	d11d      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	0e1b      	lsrs	r3, r3, #24
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	0f1b      	lsrs	r3, r3, #28
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	019a      	lsls	r2, r3, #6
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	041b      	lsls	r3, r3, #16
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	061b      	lsls	r3, r3, #24
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	071b      	lsls	r3, r3, #28
 8002b16:	4929      	ldr	r1, [pc, #164]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d028      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	0e1b      	lsrs	r3, r3, #24
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b38:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	019a      	lsls	r2, r3, #6
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	431a      	orrs	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	071b      	lsls	r3, r3, #28
 8002b5e:	4917      	ldr	r1, [pc, #92]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4911      	ldr	r1, [pc, #68]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b88:	f7fe fbea 	bl	8001360 <HAL_GetTick>
 8002b8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b90:	f7fe fbe6 	bl	8001360 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e007      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bae:	d1ef      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800

08002bc0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e01d      	b.n	8002c0e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fa30 	bl	800104c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 fb10 	bl	8003224 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	d841      	bhi.n	8002cac <HAL_TIM_IC_Start_IT+0x94>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <HAL_TIM_IC_Start_IT+0x18>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c65 	.word	0x08002c65
 8002c34:	08002cad 	.word	0x08002cad
 8002c38:	08002cad 	.word	0x08002cad
 8002c3c:	08002cad 	.word	0x08002cad
 8002c40:	08002c77 	.word	0x08002c77
 8002c44:	08002cad 	.word	0x08002cad
 8002c48:	08002cad 	.word	0x08002cad
 8002c4c:	08002cad 	.word	0x08002cad
 8002c50:	08002c89 	.word	0x08002c89
 8002c54:	08002cad 	.word	0x08002cad
 8002c58:	08002cad 	.word	0x08002cad
 8002c5c:	08002cad 	.word	0x08002cad
 8002c60:	08002c9b 	.word	0x08002c9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0202 	orr.w	r2, r2, #2
 8002c72:	60da      	str	r2, [r3, #12]
      break;
 8002c74:	e01b      	b.n	8002cae <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0204 	orr.w	r2, r2, #4
 8002c84:	60da      	str	r2, [r3, #12]
      break;
 8002c86:	e012      	b.n	8002cae <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0208 	orr.w	r2, r2, #8
 8002c96:	60da      	str	r2, [r3, #12]
      break;
 8002c98:	e009      	b.n	8002cae <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0210 	orr.w	r2, r2, #16
 8002ca8:	60da      	str	r2, [r3, #12]
      break;
 8002caa:	e000      	b.n	8002cae <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002cac:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fc7e 	bl	80035b8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_TIM_IC_Start_IT+0xd8>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_TIM_IC_Start_IT+0xce>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd4:	d007      	beq.n	8002ce6 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	00010007 	.word	0x00010007

08002cf4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d841      	bhi.n	8002d88 <HAL_TIM_IC_Stop_IT+0x94>
 8002d04:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <HAL_TIM_IC_Stop_IT+0x18>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d41 	.word	0x08002d41
 8002d10:	08002d89 	.word	0x08002d89
 8002d14:	08002d89 	.word	0x08002d89
 8002d18:	08002d89 	.word	0x08002d89
 8002d1c:	08002d53 	.word	0x08002d53
 8002d20:	08002d89 	.word	0x08002d89
 8002d24:	08002d89 	.word	0x08002d89
 8002d28:	08002d89 	.word	0x08002d89
 8002d2c:	08002d65 	.word	0x08002d65
 8002d30:	08002d89 	.word	0x08002d89
 8002d34:	08002d89 	.word	0x08002d89
 8002d38:	08002d89 	.word	0x08002d89
 8002d3c:	08002d77 	.word	0x08002d77
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0202 	bic.w	r2, r2, #2
 8002d4e:	60da      	str	r2, [r3, #12]
      break;
 8002d50:	e01b      	b.n	8002d8a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0204 	bic.w	r2, r2, #4
 8002d60:	60da      	str	r2, [r3, #12]
      break;
 8002d62:	e012      	b.n	8002d8a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0208 	bic.w	r2, r2, #8
 8002d72:	60da      	str	r2, [r3, #12]
      break;
 8002d74:	e009      	b.n	8002d8a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0210 	bic.w	r2, r2, #16
 8002d84:	60da      	str	r2, [r3, #12]
      break;
 8002d86:	e000      	b.n	8002d8a <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8002d88:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	6839      	ldr	r1, [r7, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fc10 	bl	80035b8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a1a      	ldr	r2, [r3, #32]
 8002d9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10f      	bne.n	8002dc8 <HAL_TIM_IC_Stop_IT+0xd4>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	f240 4344 	movw	r3, #1092	; 0x444
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d107      	bne.n	8002dc8 <HAL_TIM_IC_Stop_IT+0xd4>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop

08002dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d122      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d11b      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0202 	mvn.w	r2, #2
 8002e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fe f894 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 8002e1c:	e005      	b.n	8002e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f9e2 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f9e9 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d122      	bne.n	8002e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d11b      	bne.n	8002e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0204 	mvn.w	r2, #4
 8002e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe f86a 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f9b8 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f9bf 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d122      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d11b      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0208 	mvn.w	r2, #8
 8002ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2204      	movs	r2, #4
 8002eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe f840 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 8002ec4:	e005      	b.n	8002ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f98e 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f995 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d122      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d11b      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0210 	mvn.w	r2, #16
 8002efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2208      	movs	r2, #8
 8002f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe f816 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 8002f18:	e005      	b.n	8002f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f964 	bl	80031e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f96b 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d10e      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0201 	mvn.w	r2, #1
 8002f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f93e 	bl	80031d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	2b80      	cmp	r3, #128	; 0x80
 8002f64:	d10e      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d107      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fbd8 	bl	8003734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f92:	d10e      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b80      	cmp	r3, #128	; 0x80
 8002fa0:	d107      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fbcb 	bl	8003748 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d10e      	bne.n	8002fde <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d107      	bne.n	8002fde <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f919 	bl	8003210 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d10e      	bne.n	800300a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d107      	bne.n	800300a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f06f 0220 	mvn.w	r2, #32
 8003002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fb8b 	bl	8003720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_TIM_IC_ConfigChannel+0x1a>
 8003028:	2302      	movs	r3, #2
 800302a:	e08a      	b.n	8003142 <HAL_TIM_IC_ConfigChannel+0x130>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11b      	bne.n	800307a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f000 f987 	bl	8003364 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 020c 	bic.w	r2, r2, #12
 8003064:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6999      	ldr	r1, [r3, #24]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	619a      	str	r2, [r3, #24]
 8003078:	e05a      	b.n	8003130 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d11c      	bne.n	80030ba <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	6819      	ldr	r1, [r3, #0]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f000 f9dc 	bl	800344c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80030a2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6999      	ldr	r1, [r3, #24]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	021a      	lsls	r2, r3, #8
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	619a      	str	r2, [r3, #24]
 80030b8:	e03a      	b.n	8003130 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d11b      	bne.n	80030f8 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	6819      	ldr	r1, [r3, #0]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f000 f9f9 	bl	80034c6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69da      	ldr	r2, [r3, #28]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 020c 	bic.w	r2, r2, #12
 80030e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69d9      	ldr	r1, [r3, #28]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	61da      	str	r2, [r3, #28]
 80030f6:	e01b      	b.n	8003130 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	6819      	ldr	r1, [r3, #0]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f000 fa19 	bl	800353e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800311a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69d9      	ldr	r1, [r3, #28]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	021a      	lsls	r2, r3, #8
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d831      	bhi.n	80031c4 <HAL_TIM_ReadCapturedValue+0x78>
 8003160:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800319d 	.word	0x0800319d
 800316c:	080031c5 	.word	0x080031c5
 8003170:	080031c5 	.word	0x080031c5
 8003174:	080031c5 	.word	0x080031c5
 8003178:	080031a7 	.word	0x080031a7
 800317c:	080031c5 	.word	0x080031c5
 8003180:	080031c5 	.word	0x080031c5
 8003184:	080031c5 	.word	0x080031c5
 8003188:	080031b1 	.word	0x080031b1
 800318c:	080031c5 	.word	0x080031c5
 8003190:	080031c5 	.word	0x080031c5
 8003194:	080031c5 	.word	0x080031c5
 8003198:	080031bb 	.word	0x080031bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	60fb      	str	r3, [r7, #12]

      break;
 80031a4:	e00f      	b.n	80031c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	60fb      	str	r3, [r7, #12]

      break;
 80031ae:	e00a      	b.n	80031c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	60fb      	str	r3, [r7, #12]

      break;
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	60fb      	str	r3, [r7, #12]

      break;
 80031c2:	e000      	b.n	80031c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80031c4:	bf00      	nop
  }

  return tmpreg;
 80031c6:	68fb      	ldr	r3, [r7, #12]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a40      	ldr	r2, [pc, #256]	; (8003338 <TIM_Base_SetConfig+0x114>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d013      	beq.n	8003264 <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003242:	d00f      	beq.n	8003264 <TIM_Base_SetConfig+0x40>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3d      	ldr	r2, [pc, #244]	; (800333c <TIM_Base_SetConfig+0x118>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00b      	beq.n	8003264 <TIM_Base_SetConfig+0x40>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3c      	ldr	r2, [pc, #240]	; (8003340 <TIM_Base_SetConfig+0x11c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <TIM_Base_SetConfig+0x40>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3b      	ldr	r2, [pc, #236]	; (8003344 <TIM_Base_SetConfig+0x120>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_Base_SetConfig+0x40>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <TIM_Base_SetConfig+0x124>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2f      	ldr	r2, [pc, #188]	; (8003338 <TIM_Base_SetConfig+0x114>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d02b      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d027      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2c      	ldr	r2, [pc, #176]	; (800333c <TIM_Base_SetConfig+0x118>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d023      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2b      	ldr	r2, [pc, #172]	; (8003340 <TIM_Base_SetConfig+0x11c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01f      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <TIM_Base_SetConfig+0x120>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01b      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a29      	ldr	r2, [pc, #164]	; (8003348 <TIM_Base_SetConfig+0x124>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d017      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a28      	ldr	r2, [pc, #160]	; (800334c <TIM_Base_SetConfig+0x128>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a27      	ldr	r2, [pc, #156]	; (8003350 <TIM_Base_SetConfig+0x12c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00f      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a26      	ldr	r2, [pc, #152]	; (8003354 <TIM_Base_SetConfig+0x130>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00b      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a25      	ldr	r2, [pc, #148]	; (8003358 <TIM_Base_SetConfig+0x134>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a24      	ldr	r2, [pc, #144]	; (800335c <TIM_Base_SetConfig+0x138>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a23      	ldr	r2, [pc, #140]	; (8003360 <TIM_Base_SetConfig+0x13c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d108      	bne.n	80032e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <TIM_Base_SetConfig+0x114>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <TIM_Base_SetConfig+0xf8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <TIM_Base_SetConfig+0x124>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d103      	bne.n	8003324 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	615a      	str	r2, [r3, #20]
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40010400 	.word	0x40010400
 800334c:	40014000 	.word	0x40014000
 8003350:	40014400 	.word	0x40014400
 8003354:	40014800 	.word	0x40014800
 8003358:	40001800 	.word	0x40001800
 800335c:	40001c00 	.word	0x40001c00
 8003360:	40002000 	.word	0x40002000

08003364 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f023 0201 	bic.w	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4a28      	ldr	r2, [pc, #160]	; (8003430 <TIM_TI1_SetConfig+0xcc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01b      	beq.n	80033ca <TIM_TI1_SetConfig+0x66>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d017      	beq.n	80033ca <TIM_TI1_SetConfig+0x66>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a25      	ldr	r2, [pc, #148]	; (8003434 <TIM_TI1_SetConfig+0xd0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d013      	beq.n	80033ca <TIM_TI1_SetConfig+0x66>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a24      	ldr	r2, [pc, #144]	; (8003438 <TIM_TI1_SetConfig+0xd4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00f      	beq.n	80033ca <TIM_TI1_SetConfig+0x66>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a23      	ldr	r2, [pc, #140]	; (800343c <TIM_TI1_SetConfig+0xd8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00b      	beq.n	80033ca <TIM_TI1_SetConfig+0x66>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4a22      	ldr	r2, [pc, #136]	; (8003440 <TIM_TI1_SetConfig+0xdc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <TIM_TI1_SetConfig+0x66>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a21      	ldr	r2, [pc, #132]	; (8003444 <TIM_TI1_SetConfig+0xe0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d003      	beq.n	80033ca <TIM_TI1_SetConfig+0x66>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a20      	ldr	r2, [pc, #128]	; (8003448 <TIM_TI1_SetConfig+0xe4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d101      	bne.n	80033ce <TIM_TI1_SetConfig+0x6a>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <TIM_TI1_SetConfig+0x6c>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	e003      	b.n	80033ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f023 030a 	bic.w	r3, r3, #10
 8003408:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f003 030a 	and.w	r3, r3, #10
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40010400 	.word	0x40010400
 8003444:	40014000 	.word	0x40014000
 8003448:	40001800 	.word	0x40001800

0800344c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f023 0210 	bic.w	r2, r3, #16
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800348a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	031b      	lsls	r3, r3, #12
 8003490:	b29b      	uxth	r3, r3
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800349e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b087      	sub	sp, #28
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003502:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	b2db      	uxtb	r3, r3
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003516:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800353e:	b480      	push	{r7}
 8003540:	b087      	sub	sp, #28
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800357c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	031b      	lsls	r3, r3, #12
 8003582:	b29b      	uxth	r3, r3
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003590:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	031b      	lsls	r3, r3, #12
 8003596:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	621a      	str	r2, [r3, #32]
}
 80035ac:	bf00      	nop
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2201      	movs	r2, #1
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1a      	ldr	r2, [r3, #32]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	43db      	mvns	r3, r3
 80035da:	401a      	ands	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1a      	ldr	r2, [r3, #32]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003618:	2302      	movs	r3, #2
 800361a:	e06d      	b.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a30      	ldr	r2, [pc, #192]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2f      	ldr	r2, [pc, #188]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d108      	bne.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003656:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003668:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a20      	ldr	r2, [pc, #128]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368e:	d01d      	beq.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1d      	ldr	r2, [pc, #116]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a15      	ldr	r2, [pc, #84]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a16      	ldr	r2, [pc, #88]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a15      	ldr	r2, [pc, #84]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10c      	bne.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40010000 	.word	0x40010000
 8003708:	40010400 	.word	0x40010400
 800370c:	40000400 	.word	0x40000400
 8003710:	40000800 	.word	0x40000800
 8003714:	40000c00 	.word	0x40000c00
 8003718:	40014000 	.word	0x40014000
 800371c:	40001800 	.word	0x40001800

08003720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e040      	b.n	80037f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd fcb0 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8be 	bl	800391c <UART_SetConfig>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e022      	b.n	80037f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fb5c 	bl	8003e70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fbe3 	bl	8003fb4 <UART_CheckIdleState>
 80037ee:	4603      	mov	r3, r0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380c:	2b20      	cmp	r3, #32
 800380e:	d17f      	bne.n	8003910 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_UART_Transmit+0x24>
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e078      	b.n	8003912 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_UART_Transmit+0x36>
 800382a:	2302      	movs	r3, #2
 800382c:	e071      	b.n	8003912 <HAL_UART_Transmit+0x11a>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2221      	movs	r2, #33	; 0x21
 8003840:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003842:	f7fd fd8d 	bl	8001360 <HAL_GetTick>
 8003846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003860:	d108      	bne.n	8003874 <HAL_UART_Transmit+0x7c>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d104      	bne.n	8003874 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e003      	b.n	800387c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003884:	e02c      	b.n	80038e0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2200      	movs	r2, #0
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fbd4 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e038      	b.n	8003912 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10b      	bne.n	80038be <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	3302      	adds	r3, #2
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e007      	b.n	80038ce <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	3301      	adds	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1cc      	bne.n	8003886 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2200      	movs	r2, #0
 80038f4:	2140      	movs	r1, #64	; 0x40
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fba1 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e005      	b.n	8003912 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e000      	b.n	8003912 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	3720      	adds	r7, #32
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4bb1      	ldr	r3, [pc, #708]	; (8003c10 <UART_SetConfig+0x2f4>)
 800394c:	4013      	ands	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	6939      	ldr	r1, [r7, #16]
 8003954:	430b      	orrs	r3, r1
 8003956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a9f      	ldr	r2, [pc, #636]	; (8003c14 <UART_SetConfig+0x2f8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d121      	bne.n	80039e0 <UART_SetConfig+0xc4>
 800399c:	4b9e      	ldr	r3, [pc, #632]	; (8003c18 <UART_SetConfig+0x2fc>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d816      	bhi.n	80039d8 <UART_SetConfig+0xbc>
 80039aa:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0x94>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	080039c1 	.word	0x080039c1
 80039b4:	080039cd 	.word	0x080039cd
 80039b8:	080039c7 	.word	0x080039c7
 80039bc:	080039d3 	.word	0x080039d3
 80039c0:	2301      	movs	r3, #1
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e151      	b.n	8003c6a <UART_SetConfig+0x34e>
 80039c6:	2302      	movs	r3, #2
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e14e      	b.n	8003c6a <UART_SetConfig+0x34e>
 80039cc:	2304      	movs	r3, #4
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e14b      	b.n	8003c6a <UART_SetConfig+0x34e>
 80039d2:	2308      	movs	r3, #8
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e148      	b.n	8003c6a <UART_SetConfig+0x34e>
 80039d8:	2310      	movs	r3, #16
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	bf00      	nop
 80039de:	e144      	b.n	8003c6a <UART_SetConfig+0x34e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a8d      	ldr	r2, [pc, #564]	; (8003c1c <UART_SetConfig+0x300>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d134      	bne.n	8003a54 <UART_SetConfig+0x138>
 80039ea:	4b8b      	ldr	r3, [pc, #556]	; (8003c18 <UART_SetConfig+0x2fc>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b0c      	cmp	r3, #12
 80039f6:	d829      	bhi.n	8003a4c <UART_SetConfig+0x130>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <UART_SetConfig+0xe4>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a35 	.word	0x08003a35
 8003a04:	08003a4d 	.word	0x08003a4d
 8003a08:	08003a4d 	.word	0x08003a4d
 8003a0c:	08003a4d 	.word	0x08003a4d
 8003a10:	08003a41 	.word	0x08003a41
 8003a14:	08003a4d 	.word	0x08003a4d
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003a4d 	.word	0x08003a4d
 8003a20:	08003a3b 	.word	0x08003a3b
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	08003a4d 	.word	0x08003a4d
 8003a2c:	08003a4d 	.word	0x08003a4d
 8003a30:	08003a47 	.word	0x08003a47
 8003a34:	2300      	movs	r3, #0
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e117      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e114      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003a40:	2304      	movs	r3, #4
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e111      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003a46:	2308      	movs	r3, #8
 8003a48:	77fb      	strb	r3, [r7, #31]
 8003a4a:	e10e      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	bf00      	nop
 8003a52:	e10a      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a71      	ldr	r2, [pc, #452]	; (8003c20 <UART_SetConfig+0x304>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d120      	bne.n	8003aa0 <UART_SetConfig+0x184>
 8003a5e:	4b6e      	ldr	r3, [pc, #440]	; (8003c18 <UART_SetConfig+0x2fc>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d00f      	beq.n	8003a8c <UART_SetConfig+0x170>
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d802      	bhi.n	8003a76 <UART_SetConfig+0x15a>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <UART_SetConfig+0x164>
 8003a74:	e010      	b.n	8003a98 <UART_SetConfig+0x17c>
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d005      	beq.n	8003a86 <UART_SetConfig+0x16a>
 8003a7a:	2b30      	cmp	r3, #48	; 0x30
 8003a7c:	d009      	beq.n	8003a92 <UART_SetConfig+0x176>
 8003a7e:	e00b      	b.n	8003a98 <UART_SetConfig+0x17c>
 8003a80:	2300      	movs	r3, #0
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e0f1      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003a86:	2302      	movs	r3, #2
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e0ee      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e0eb      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003a92:	2308      	movs	r3, #8
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e0e8      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	bf00      	nop
 8003a9e:	e0e4      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a5f      	ldr	r2, [pc, #380]	; (8003c24 <UART_SetConfig+0x308>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d120      	bne.n	8003aec <UART_SetConfig+0x1d0>
 8003aaa:	4b5b      	ldr	r3, [pc, #364]	; (8003c18 <UART_SetConfig+0x2fc>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d00f      	beq.n	8003ad8 <UART_SetConfig+0x1bc>
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d802      	bhi.n	8003ac2 <UART_SetConfig+0x1a6>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <UART_SetConfig+0x1b0>
 8003ac0:	e010      	b.n	8003ae4 <UART_SetConfig+0x1c8>
 8003ac2:	2b80      	cmp	r3, #128	; 0x80
 8003ac4:	d005      	beq.n	8003ad2 <UART_SetConfig+0x1b6>
 8003ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ac8:	d009      	beq.n	8003ade <UART_SetConfig+0x1c2>
 8003aca:	e00b      	b.n	8003ae4 <UART_SetConfig+0x1c8>
 8003acc:	2300      	movs	r3, #0
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e0cb      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e0c8      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e0c5      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e0c2      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	bf00      	nop
 8003aea:	e0be      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a4d      	ldr	r2, [pc, #308]	; (8003c28 <UART_SetConfig+0x30c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d124      	bne.n	8003b40 <UART_SetConfig+0x224>
 8003af6:	4b48      	ldr	r3, [pc, #288]	; (8003c18 <UART_SetConfig+0x2fc>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b04:	d012      	beq.n	8003b2c <UART_SetConfig+0x210>
 8003b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0a:	d802      	bhi.n	8003b12 <UART_SetConfig+0x1f6>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <UART_SetConfig+0x204>
 8003b10:	e012      	b.n	8003b38 <UART_SetConfig+0x21c>
 8003b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b16:	d006      	beq.n	8003b26 <UART_SetConfig+0x20a>
 8003b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b1c:	d009      	beq.n	8003b32 <UART_SetConfig+0x216>
 8003b1e:	e00b      	b.n	8003b38 <UART_SetConfig+0x21c>
 8003b20:	2300      	movs	r3, #0
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e0a1      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003b26:	2302      	movs	r3, #2
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e09e      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e09b      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003b32:	2308      	movs	r3, #8
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e098      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003b38:	2310      	movs	r3, #16
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	bf00      	nop
 8003b3e:	e094      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a39      	ldr	r2, [pc, #228]	; (8003c2c <UART_SetConfig+0x310>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d124      	bne.n	8003b94 <UART_SetConfig+0x278>
 8003b4a:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <UART_SetConfig+0x2fc>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b58:	d012      	beq.n	8003b80 <UART_SetConfig+0x264>
 8003b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5e:	d802      	bhi.n	8003b66 <UART_SetConfig+0x24a>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <UART_SetConfig+0x258>
 8003b64:	e012      	b.n	8003b8c <UART_SetConfig+0x270>
 8003b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b6a:	d006      	beq.n	8003b7a <UART_SetConfig+0x25e>
 8003b6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b70:	d009      	beq.n	8003b86 <UART_SetConfig+0x26a>
 8003b72:	e00b      	b.n	8003b8c <UART_SetConfig+0x270>
 8003b74:	2301      	movs	r3, #1
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e077      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	e074      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003b80:	2304      	movs	r3, #4
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e071      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003b86:	2308      	movs	r3, #8
 8003b88:	77fb      	strb	r3, [r7, #31]
 8003b8a:	e06e      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	bf00      	nop
 8003b92:	e06a      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <UART_SetConfig+0x314>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d124      	bne.n	8003be8 <UART_SetConfig+0x2cc>
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <UART_SetConfig+0x2fc>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bac:	d012      	beq.n	8003bd4 <UART_SetConfig+0x2b8>
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb2:	d802      	bhi.n	8003bba <UART_SetConfig+0x29e>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <UART_SetConfig+0x2ac>
 8003bb8:	e012      	b.n	8003be0 <UART_SetConfig+0x2c4>
 8003bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbe:	d006      	beq.n	8003bce <UART_SetConfig+0x2b2>
 8003bc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bc4:	d009      	beq.n	8003bda <UART_SetConfig+0x2be>
 8003bc6:	e00b      	b.n	8003be0 <UART_SetConfig+0x2c4>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e04d      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	77fb      	strb	r3, [r7, #31]
 8003bd2:	e04a      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e047      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003bda:	2308      	movs	r3, #8
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e044      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003be0:	2310      	movs	r3, #16
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	bf00      	nop
 8003be6:	e040      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <UART_SetConfig+0x318>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d139      	bne.n	8003c66 <UART_SetConfig+0x34a>
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <UART_SetConfig+0x2fc>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c00:	d027      	beq.n	8003c52 <UART_SetConfig+0x336>
 8003c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c06:	d817      	bhi.n	8003c38 <UART_SetConfig+0x31c>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01c      	beq.n	8003c46 <UART_SetConfig+0x32a>
 8003c0c:	e027      	b.n	8003c5e <UART_SetConfig+0x342>
 8003c0e:	bf00      	nop
 8003c10:	efff69f3 	.word	0xefff69f3
 8003c14:	40011000 	.word	0x40011000
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40004400 	.word	0x40004400
 8003c20:	40004800 	.word	0x40004800
 8003c24:	40004c00 	.word	0x40004c00
 8003c28:	40005000 	.word	0x40005000
 8003c2c:	40011400 	.word	0x40011400
 8003c30:	40007800 	.word	0x40007800
 8003c34:	40007c00 	.word	0x40007c00
 8003c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3c:	d006      	beq.n	8003c4c <UART_SetConfig+0x330>
 8003c3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c42:	d009      	beq.n	8003c58 <UART_SetConfig+0x33c>
 8003c44:	e00b      	b.n	8003c5e <UART_SetConfig+0x342>
 8003c46:	2300      	movs	r3, #0
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e00e      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e00b      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003c52:	2304      	movs	r3, #4
 8003c54:	77fb      	strb	r3, [r7, #31]
 8003c56:	e008      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	e005      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003c5e:	2310      	movs	r3, #16
 8003c60:	77fb      	strb	r3, [r7, #31]
 8003c62:	bf00      	nop
 8003c64:	e001      	b.n	8003c6a <UART_SetConfig+0x34e>
 8003c66:	2310      	movs	r3, #16
 8003c68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c72:	d17f      	bne.n	8003d74 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003c74:	7ffb      	ldrb	r3, [r7, #31]
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d85c      	bhi.n	8003d34 <UART_SetConfig+0x418>
 8003c7a:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <UART_SetConfig+0x364>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003cc5 	.word	0x08003cc5
 8003c88:	08003ce5 	.word	0x08003ce5
 8003c8c:	08003d35 	.word	0x08003d35
 8003c90:	08003cfd 	.word	0x08003cfd
 8003c94:	08003d35 	.word	0x08003d35
 8003c98:	08003d35 	.word	0x08003d35
 8003c9c:	08003d35 	.word	0x08003d35
 8003ca0:	08003d1d 	.word	0x08003d1d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f7fe fb3e 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 8003ca8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	005a      	lsls	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	441a      	add	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	61bb      	str	r3, [r7, #24]
        break;
 8003cc2:	e03a      	b.n	8003d3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc4:	f7fe fb42 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 8003cc8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	005a      	lsls	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	441a      	add	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	61bb      	str	r3, [r7, #24]
        break;
 8003ce2:	e02a      	b.n	8003d3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	085a      	lsrs	r2, r3, #1
 8003cea:	4b5f      	ldr	r3, [pc, #380]	; (8003e68 <UART_SetConfig+0x54c>)
 8003cec:	4413      	add	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6852      	ldr	r2, [r2, #4]
 8003cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	61bb      	str	r3, [r7, #24]
        break;
 8003cfa:	e01e      	b.n	8003d3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfc:	f7fe fa2e 	bl	800215c <HAL_RCC_GetSysClockFreq>
 8003d00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	005a      	lsls	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	61bb      	str	r3, [r7, #24]
        break;
 8003d1a:	e00e      	b.n	8003d3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	61bb      	str	r3, [r7, #24]
        break;
 8003d32:	e002      	b.n	8003d3a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
        break;
 8003d38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b0f      	cmp	r3, #15
 8003d3e:	d916      	bls.n	8003d6e <UART_SetConfig+0x452>
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d46:	d212      	bcs.n	8003d6e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f023 030f 	bic.w	r3, r3, #15
 8003d50:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	897b      	ldrh	r3, [r7, #10]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	897a      	ldrh	r2, [r7, #10]
 8003d6a:	60da      	str	r2, [r3, #12]
 8003d6c:	e070      	b.n	8003e50 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]
 8003d72:	e06d      	b.n	8003e50 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003d74:	7ffb      	ldrb	r3, [r7, #31]
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d859      	bhi.n	8003e2e <UART_SetConfig+0x512>
 8003d7a:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <UART_SetConfig+0x464>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003dc3 	.word	0x08003dc3
 8003d88:	08003de1 	.word	0x08003de1
 8003d8c:	08003e2f 	.word	0x08003e2f
 8003d90:	08003df9 	.word	0x08003df9
 8003d94:	08003e2f 	.word	0x08003e2f
 8003d98:	08003e2f 	.word	0x08003e2f
 8003d9c:	08003e2f 	.word	0x08003e2f
 8003da0:	08003e17 	.word	0x08003e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da4:	f7fe fabe 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 8003da8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	085a      	lsrs	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	441a      	add	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	61bb      	str	r3, [r7, #24]
        break;
 8003dc0:	e038      	b.n	8003e34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc2:	f7fe fac3 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 8003dc6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	085a      	lsrs	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	61bb      	str	r3, [r7, #24]
        break;
 8003dde:	e029      	b.n	8003e34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	085a      	lsrs	r2, r3, #1
 8003de6:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <UART_SetConfig+0x550>)
 8003de8:	4413      	add	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6852      	ldr	r2, [r2, #4]
 8003dee:	fbb3 f3f2 	udiv	r3, r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	61bb      	str	r3, [r7, #24]
        break;
 8003df6:	e01d      	b.n	8003e34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df8:	f7fe f9b0 	bl	800215c <HAL_RCC_GetSysClockFreq>
 8003dfc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	085a      	lsrs	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	441a      	add	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	61bb      	str	r3, [r7, #24]
        break;
 8003e14:	e00e      	b.n	8003e34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	61bb      	str	r3, [r7, #24]
        break;
 8003e2c:	e002      	b.n	8003e34 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
        break;
 8003e32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	d908      	bls.n	8003e4c <UART_SetConfig+0x530>
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e40:	d204      	bcs.n	8003e4c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	e001      	b.n	8003e50 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	01e84800 	.word	0x01e84800
 8003e6c:	00f42400 	.word	0x00f42400

08003e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01a      	beq.n	8003f86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f6e:	d10a      	bne.n	8003f86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]
  }
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003fc2:	f7fd f9cd 	bl	8001360 <HAL_GetTick>
 8003fc6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d10e      	bne.n	8003ff4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f82a 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e020      	b.n	8004036 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d10e      	bne.n	8004020 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004002:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f814 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e00a      	b.n	8004036 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404e:	e05d      	b.n	800410c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d059      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004058:	f7fd f982 	bl	8001360 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <UART_WaitOnFlagUntilTimeout+0x30>
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11b      	bne.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800407c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e042      	b.n	800412c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02b      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c2:	d123      	bne.n	800410c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040cc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0201 	bic.w	r2, r2, #1
 80040ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e00f      	b.n	800412c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4013      	ands	r3, r2
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	429a      	cmp	r2, r3
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	429a      	cmp	r2, r3
 8004128:	d092      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <__errno>:
 8004134:	4b01      	ldr	r3, [pc, #4]	; (800413c <__errno+0x8>)
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000010 	.word	0x20000010

08004140 <__libc_init_array>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	4e0d      	ldr	r6, [pc, #52]	; (8004178 <__libc_init_array+0x38>)
 8004144:	4c0d      	ldr	r4, [pc, #52]	; (800417c <__libc_init_array+0x3c>)
 8004146:	1ba4      	subs	r4, r4, r6
 8004148:	10a4      	asrs	r4, r4, #2
 800414a:	2500      	movs	r5, #0
 800414c:	42a5      	cmp	r5, r4
 800414e:	d109      	bne.n	8004164 <__libc_init_array+0x24>
 8004150:	4e0b      	ldr	r6, [pc, #44]	; (8004180 <__libc_init_array+0x40>)
 8004152:	4c0c      	ldr	r4, [pc, #48]	; (8004184 <__libc_init_array+0x44>)
 8004154:	f000 fc26 	bl	80049a4 <_init>
 8004158:	1ba4      	subs	r4, r4, r6
 800415a:	10a4      	asrs	r4, r4, #2
 800415c:	2500      	movs	r5, #0
 800415e:	42a5      	cmp	r5, r4
 8004160:	d105      	bne.n	800416e <__libc_init_array+0x2e>
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004168:	4798      	blx	r3
 800416a:	3501      	adds	r5, #1
 800416c:	e7ee      	b.n	800414c <__libc_init_array+0xc>
 800416e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004172:	4798      	blx	r3
 8004174:	3501      	adds	r5, #1
 8004176:	e7f2      	b.n	800415e <__libc_init_array+0x1e>
 8004178:	08004a7c 	.word	0x08004a7c
 800417c:	08004a7c 	.word	0x08004a7c
 8004180:	08004a7c 	.word	0x08004a7c
 8004184:	08004a80 	.word	0x08004a80

08004188 <memset>:
 8004188:	4402      	add	r2, r0
 800418a:	4603      	mov	r3, r0
 800418c:	4293      	cmp	r3, r2
 800418e:	d100      	bne.n	8004192 <memset+0xa>
 8004190:	4770      	bx	lr
 8004192:	f803 1b01 	strb.w	r1, [r3], #1
 8004196:	e7f9      	b.n	800418c <memset+0x4>

08004198 <siprintf>:
 8004198:	b40e      	push	{r1, r2, r3}
 800419a:	b500      	push	{lr}
 800419c:	b09c      	sub	sp, #112	; 0x70
 800419e:	ab1d      	add	r3, sp, #116	; 0x74
 80041a0:	9002      	str	r0, [sp, #8]
 80041a2:	9006      	str	r0, [sp, #24]
 80041a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041a8:	4809      	ldr	r0, [pc, #36]	; (80041d0 <siprintf+0x38>)
 80041aa:	9107      	str	r1, [sp, #28]
 80041ac:	9104      	str	r1, [sp, #16]
 80041ae:	4909      	ldr	r1, [pc, #36]	; (80041d4 <siprintf+0x3c>)
 80041b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80041b4:	9105      	str	r1, [sp, #20]
 80041b6:	6800      	ldr	r0, [r0, #0]
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	a902      	add	r1, sp, #8
 80041bc:	f000 f866 	bl	800428c <_svfiprintf_r>
 80041c0:	9b02      	ldr	r3, [sp, #8]
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	b01c      	add	sp, #112	; 0x70
 80041c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041cc:	b003      	add	sp, #12
 80041ce:	4770      	bx	lr
 80041d0:	20000010 	.word	0x20000010
 80041d4:	ffff0208 	.word	0xffff0208

080041d8 <__ssputs_r>:
 80041d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041dc:	688e      	ldr	r6, [r1, #8]
 80041de:	429e      	cmp	r6, r3
 80041e0:	4682      	mov	sl, r0
 80041e2:	460c      	mov	r4, r1
 80041e4:	4690      	mov	r8, r2
 80041e6:	4699      	mov	r9, r3
 80041e8:	d837      	bhi.n	800425a <__ssputs_r+0x82>
 80041ea:	898a      	ldrh	r2, [r1, #12]
 80041ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041f0:	d031      	beq.n	8004256 <__ssputs_r+0x7e>
 80041f2:	6825      	ldr	r5, [r4, #0]
 80041f4:	6909      	ldr	r1, [r1, #16]
 80041f6:	1a6f      	subs	r7, r5, r1
 80041f8:	6965      	ldr	r5, [r4, #20]
 80041fa:	2302      	movs	r3, #2
 80041fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004200:	fb95 f5f3 	sdiv	r5, r5, r3
 8004204:	f109 0301 	add.w	r3, r9, #1
 8004208:	443b      	add	r3, r7
 800420a:	429d      	cmp	r5, r3
 800420c:	bf38      	it	cc
 800420e:	461d      	movcc	r5, r3
 8004210:	0553      	lsls	r3, r2, #21
 8004212:	d530      	bpl.n	8004276 <__ssputs_r+0x9e>
 8004214:	4629      	mov	r1, r5
 8004216:	f000 fb2b 	bl	8004870 <_malloc_r>
 800421a:	4606      	mov	r6, r0
 800421c:	b950      	cbnz	r0, 8004234 <__ssputs_r+0x5c>
 800421e:	230c      	movs	r3, #12
 8004220:	f8ca 3000 	str.w	r3, [sl]
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800422a:	81a3      	strh	r3, [r4, #12]
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004234:	463a      	mov	r2, r7
 8004236:	6921      	ldr	r1, [r4, #16]
 8004238:	f000 faa8 	bl	800478c <memcpy>
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004246:	81a3      	strh	r3, [r4, #12]
 8004248:	6126      	str	r6, [r4, #16]
 800424a:	6165      	str	r5, [r4, #20]
 800424c:	443e      	add	r6, r7
 800424e:	1bed      	subs	r5, r5, r7
 8004250:	6026      	str	r6, [r4, #0]
 8004252:	60a5      	str	r5, [r4, #8]
 8004254:	464e      	mov	r6, r9
 8004256:	454e      	cmp	r6, r9
 8004258:	d900      	bls.n	800425c <__ssputs_r+0x84>
 800425a:	464e      	mov	r6, r9
 800425c:	4632      	mov	r2, r6
 800425e:	4641      	mov	r1, r8
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	f000 fa9e 	bl	80047a2 <memmove>
 8004266:	68a3      	ldr	r3, [r4, #8]
 8004268:	1b9b      	subs	r3, r3, r6
 800426a:	60a3      	str	r3, [r4, #8]
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	441e      	add	r6, r3
 8004270:	6026      	str	r6, [r4, #0]
 8004272:	2000      	movs	r0, #0
 8004274:	e7dc      	b.n	8004230 <__ssputs_r+0x58>
 8004276:	462a      	mov	r2, r5
 8004278:	f000 fb54 	bl	8004924 <_realloc_r>
 800427c:	4606      	mov	r6, r0
 800427e:	2800      	cmp	r0, #0
 8004280:	d1e2      	bne.n	8004248 <__ssputs_r+0x70>
 8004282:	6921      	ldr	r1, [r4, #16]
 8004284:	4650      	mov	r0, sl
 8004286:	f000 faa5 	bl	80047d4 <_free_r>
 800428a:	e7c8      	b.n	800421e <__ssputs_r+0x46>

0800428c <_svfiprintf_r>:
 800428c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004290:	461d      	mov	r5, r3
 8004292:	898b      	ldrh	r3, [r1, #12]
 8004294:	061f      	lsls	r7, r3, #24
 8004296:	b09d      	sub	sp, #116	; 0x74
 8004298:	4680      	mov	r8, r0
 800429a:	460c      	mov	r4, r1
 800429c:	4616      	mov	r6, r2
 800429e:	d50f      	bpl.n	80042c0 <_svfiprintf_r+0x34>
 80042a0:	690b      	ldr	r3, [r1, #16]
 80042a2:	b96b      	cbnz	r3, 80042c0 <_svfiprintf_r+0x34>
 80042a4:	2140      	movs	r1, #64	; 0x40
 80042a6:	f000 fae3 	bl	8004870 <_malloc_r>
 80042aa:	6020      	str	r0, [r4, #0]
 80042ac:	6120      	str	r0, [r4, #16]
 80042ae:	b928      	cbnz	r0, 80042bc <_svfiprintf_r+0x30>
 80042b0:	230c      	movs	r3, #12
 80042b2:	f8c8 3000 	str.w	r3, [r8]
 80042b6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ba:	e0c8      	b.n	800444e <_svfiprintf_r+0x1c2>
 80042bc:	2340      	movs	r3, #64	; 0x40
 80042be:	6163      	str	r3, [r4, #20]
 80042c0:	2300      	movs	r3, #0
 80042c2:	9309      	str	r3, [sp, #36]	; 0x24
 80042c4:	2320      	movs	r3, #32
 80042c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042ca:	2330      	movs	r3, #48	; 0x30
 80042cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042d0:	9503      	str	r5, [sp, #12]
 80042d2:	f04f 0b01 	mov.w	fp, #1
 80042d6:	4637      	mov	r7, r6
 80042d8:	463d      	mov	r5, r7
 80042da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80042de:	b10b      	cbz	r3, 80042e4 <_svfiprintf_r+0x58>
 80042e0:	2b25      	cmp	r3, #37	; 0x25
 80042e2:	d13e      	bne.n	8004362 <_svfiprintf_r+0xd6>
 80042e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80042e8:	d00b      	beq.n	8004302 <_svfiprintf_r+0x76>
 80042ea:	4653      	mov	r3, sl
 80042ec:	4632      	mov	r2, r6
 80042ee:	4621      	mov	r1, r4
 80042f0:	4640      	mov	r0, r8
 80042f2:	f7ff ff71 	bl	80041d8 <__ssputs_r>
 80042f6:	3001      	adds	r0, #1
 80042f8:	f000 80a4 	beq.w	8004444 <_svfiprintf_r+0x1b8>
 80042fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042fe:	4453      	add	r3, sl
 8004300:	9309      	str	r3, [sp, #36]	; 0x24
 8004302:	783b      	ldrb	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 809d 	beq.w	8004444 <_svfiprintf_r+0x1b8>
 800430a:	2300      	movs	r3, #0
 800430c:	f04f 32ff 	mov.w	r2, #4294967295
 8004310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004314:	9304      	str	r3, [sp, #16]
 8004316:	9307      	str	r3, [sp, #28]
 8004318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800431c:	931a      	str	r3, [sp, #104]	; 0x68
 800431e:	462f      	mov	r7, r5
 8004320:	2205      	movs	r2, #5
 8004322:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004326:	4850      	ldr	r0, [pc, #320]	; (8004468 <_svfiprintf_r+0x1dc>)
 8004328:	f7fb ff92 	bl	8000250 <memchr>
 800432c:	9b04      	ldr	r3, [sp, #16]
 800432e:	b9d0      	cbnz	r0, 8004366 <_svfiprintf_r+0xda>
 8004330:	06d9      	lsls	r1, r3, #27
 8004332:	bf44      	itt	mi
 8004334:	2220      	movmi	r2, #32
 8004336:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800433a:	071a      	lsls	r2, r3, #28
 800433c:	bf44      	itt	mi
 800433e:	222b      	movmi	r2, #43	; 0x2b
 8004340:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004344:	782a      	ldrb	r2, [r5, #0]
 8004346:	2a2a      	cmp	r2, #42	; 0x2a
 8004348:	d015      	beq.n	8004376 <_svfiprintf_r+0xea>
 800434a:	9a07      	ldr	r2, [sp, #28]
 800434c:	462f      	mov	r7, r5
 800434e:	2000      	movs	r0, #0
 8004350:	250a      	movs	r5, #10
 8004352:	4639      	mov	r1, r7
 8004354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004358:	3b30      	subs	r3, #48	; 0x30
 800435a:	2b09      	cmp	r3, #9
 800435c:	d94d      	bls.n	80043fa <_svfiprintf_r+0x16e>
 800435e:	b1b8      	cbz	r0, 8004390 <_svfiprintf_r+0x104>
 8004360:	e00f      	b.n	8004382 <_svfiprintf_r+0xf6>
 8004362:	462f      	mov	r7, r5
 8004364:	e7b8      	b.n	80042d8 <_svfiprintf_r+0x4c>
 8004366:	4a40      	ldr	r2, [pc, #256]	; (8004468 <_svfiprintf_r+0x1dc>)
 8004368:	1a80      	subs	r0, r0, r2
 800436a:	fa0b f000 	lsl.w	r0, fp, r0
 800436e:	4318      	orrs	r0, r3
 8004370:	9004      	str	r0, [sp, #16]
 8004372:	463d      	mov	r5, r7
 8004374:	e7d3      	b.n	800431e <_svfiprintf_r+0x92>
 8004376:	9a03      	ldr	r2, [sp, #12]
 8004378:	1d11      	adds	r1, r2, #4
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	9103      	str	r1, [sp, #12]
 800437e:	2a00      	cmp	r2, #0
 8004380:	db01      	blt.n	8004386 <_svfiprintf_r+0xfa>
 8004382:	9207      	str	r2, [sp, #28]
 8004384:	e004      	b.n	8004390 <_svfiprintf_r+0x104>
 8004386:	4252      	negs	r2, r2
 8004388:	f043 0302 	orr.w	r3, r3, #2
 800438c:	9207      	str	r2, [sp, #28]
 800438e:	9304      	str	r3, [sp, #16]
 8004390:	783b      	ldrb	r3, [r7, #0]
 8004392:	2b2e      	cmp	r3, #46	; 0x2e
 8004394:	d10c      	bne.n	80043b0 <_svfiprintf_r+0x124>
 8004396:	787b      	ldrb	r3, [r7, #1]
 8004398:	2b2a      	cmp	r3, #42	; 0x2a
 800439a:	d133      	bne.n	8004404 <_svfiprintf_r+0x178>
 800439c:	9b03      	ldr	r3, [sp, #12]
 800439e:	1d1a      	adds	r2, r3, #4
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	9203      	str	r2, [sp, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bfb8      	it	lt
 80043a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80043ac:	3702      	adds	r7, #2
 80043ae:	9305      	str	r3, [sp, #20]
 80043b0:	4d2e      	ldr	r5, [pc, #184]	; (800446c <_svfiprintf_r+0x1e0>)
 80043b2:	7839      	ldrb	r1, [r7, #0]
 80043b4:	2203      	movs	r2, #3
 80043b6:	4628      	mov	r0, r5
 80043b8:	f7fb ff4a 	bl	8000250 <memchr>
 80043bc:	b138      	cbz	r0, 80043ce <_svfiprintf_r+0x142>
 80043be:	2340      	movs	r3, #64	; 0x40
 80043c0:	1b40      	subs	r0, r0, r5
 80043c2:	fa03 f000 	lsl.w	r0, r3, r0
 80043c6:	9b04      	ldr	r3, [sp, #16]
 80043c8:	4303      	orrs	r3, r0
 80043ca:	3701      	adds	r7, #1
 80043cc:	9304      	str	r3, [sp, #16]
 80043ce:	7839      	ldrb	r1, [r7, #0]
 80043d0:	4827      	ldr	r0, [pc, #156]	; (8004470 <_svfiprintf_r+0x1e4>)
 80043d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043d6:	2206      	movs	r2, #6
 80043d8:	1c7e      	adds	r6, r7, #1
 80043da:	f7fb ff39 	bl	8000250 <memchr>
 80043de:	2800      	cmp	r0, #0
 80043e0:	d038      	beq.n	8004454 <_svfiprintf_r+0x1c8>
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <_svfiprintf_r+0x1e8>)
 80043e4:	bb13      	cbnz	r3, 800442c <_svfiprintf_r+0x1a0>
 80043e6:	9b03      	ldr	r3, [sp, #12]
 80043e8:	3307      	adds	r3, #7
 80043ea:	f023 0307 	bic.w	r3, r3, #7
 80043ee:	3308      	adds	r3, #8
 80043f0:	9303      	str	r3, [sp, #12]
 80043f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043f4:	444b      	add	r3, r9
 80043f6:	9309      	str	r3, [sp, #36]	; 0x24
 80043f8:	e76d      	b.n	80042d6 <_svfiprintf_r+0x4a>
 80043fa:	fb05 3202 	mla	r2, r5, r2, r3
 80043fe:	2001      	movs	r0, #1
 8004400:	460f      	mov	r7, r1
 8004402:	e7a6      	b.n	8004352 <_svfiprintf_r+0xc6>
 8004404:	2300      	movs	r3, #0
 8004406:	3701      	adds	r7, #1
 8004408:	9305      	str	r3, [sp, #20]
 800440a:	4619      	mov	r1, r3
 800440c:	250a      	movs	r5, #10
 800440e:	4638      	mov	r0, r7
 8004410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004414:	3a30      	subs	r2, #48	; 0x30
 8004416:	2a09      	cmp	r2, #9
 8004418:	d903      	bls.n	8004422 <_svfiprintf_r+0x196>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0c8      	beq.n	80043b0 <_svfiprintf_r+0x124>
 800441e:	9105      	str	r1, [sp, #20]
 8004420:	e7c6      	b.n	80043b0 <_svfiprintf_r+0x124>
 8004422:	fb05 2101 	mla	r1, r5, r1, r2
 8004426:	2301      	movs	r3, #1
 8004428:	4607      	mov	r7, r0
 800442a:	e7f0      	b.n	800440e <_svfiprintf_r+0x182>
 800442c:	ab03      	add	r3, sp, #12
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	4622      	mov	r2, r4
 8004432:	4b11      	ldr	r3, [pc, #68]	; (8004478 <_svfiprintf_r+0x1ec>)
 8004434:	a904      	add	r1, sp, #16
 8004436:	4640      	mov	r0, r8
 8004438:	f3af 8000 	nop.w
 800443c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004440:	4681      	mov	r9, r0
 8004442:	d1d6      	bne.n	80043f2 <_svfiprintf_r+0x166>
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	065b      	lsls	r3, r3, #25
 8004448:	f53f af35 	bmi.w	80042b6 <_svfiprintf_r+0x2a>
 800444c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800444e:	b01d      	add	sp, #116	; 0x74
 8004450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004454:	ab03      	add	r3, sp, #12
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	4622      	mov	r2, r4
 800445a:	4b07      	ldr	r3, [pc, #28]	; (8004478 <_svfiprintf_r+0x1ec>)
 800445c:	a904      	add	r1, sp, #16
 800445e:	4640      	mov	r0, r8
 8004460:	f000 f882 	bl	8004568 <_printf_i>
 8004464:	e7ea      	b.n	800443c <_svfiprintf_r+0x1b0>
 8004466:	bf00      	nop
 8004468:	08004a40 	.word	0x08004a40
 800446c:	08004a46 	.word	0x08004a46
 8004470:	08004a4a 	.word	0x08004a4a
 8004474:	00000000 	.word	0x00000000
 8004478:	080041d9 	.word	0x080041d9

0800447c <_printf_common>:
 800447c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	4691      	mov	r9, r2
 8004482:	461f      	mov	r7, r3
 8004484:	688a      	ldr	r2, [r1, #8]
 8004486:	690b      	ldr	r3, [r1, #16]
 8004488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800448c:	4293      	cmp	r3, r2
 800448e:	bfb8      	it	lt
 8004490:	4613      	movlt	r3, r2
 8004492:	f8c9 3000 	str.w	r3, [r9]
 8004496:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800449a:	4606      	mov	r6, r0
 800449c:	460c      	mov	r4, r1
 800449e:	b112      	cbz	r2, 80044a6 <_printf_common+0x2a>
 80044a0:	3301      	adds	r3, #1
 80044a2:	f8c9 3000 	str.w	r3, [r9]
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	0699      	lsls	r1, r3, #26
 80044aa:	bf42      	ittt	mi
 80044ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80044b0:	3302      	addmi	r3, #2
 80044b2:	f8c9 3000 	strmi.w	r3, [r9]
 80044b6:	6825      	ldr	r5, [r4, #0]
 80044b8:	f015 0506 	ands.w	r5, r5, #6
 80044bc:	d107      	bne.n	80044ce <_printf_common+0x52>
 80044be:	f104 0a19 	add.w	sl, r4, #25
 80044c2:	68e3      	ldr	r3, [r4, #12]
 80044c4:	f8d9 2000 	ldr.w	r2, [r9]
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	42ab      	cmp	r3, r5
 80044cc:	dc28      	bgt.n	8004520 <_printf_common+0xa4>
 80044ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80044d2:	6822      	ldr	r2, [r4, #0]
 80044d4:	3300      	adds	r3, #0
 80044d6:	bf18      	it	ne
 80044d8:	2301      	movne	r3, #1
 80044da:	0692      	lsls	r2, r2, #26
 80044dc:	d42d      	bmi.n	800453a <_printf_common+0xbe>
 80044de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044e2:	4639      	mov	r1, r7
 80044e4:	4630      	mov	r0, r6
 80044e6:	47c0      	blx	r8
 80044e8:	3001      	adds	r0, #1
 80044ea:	d020      	beq.n	800452e <_printf_common+0xb2>
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	68e5      	ldr	r5, [r4, #12]
 80044f0:	f8d9 2000 	ldr.w	r2, [r9]
 80044f4:	f003 0306 	and.w	r3, r3, #6
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	bf08      	it	eq
 80044fc:	1aad      	subeq	r5, r5, r2
 80044fe:	68a3      	ldr	r3, [r4, #8]
 8004500:	6922      	ldr	r2, [r4, #16]
 8004502:	bf0c      	ite	eq
 8004504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004508:	2500      	movne	r5, #0
 800450a:	4293      	cmp	r3, r2
 800450c:	bfc4      	itt	gt
 800450e:	1a9b      	subgt	r3, r3, r2
 8004510:	18ed      	addgt	r5, r5, r3
 8004512:	f04f 0900 	mov.w	r9, #0
 8004516:	341a      	adds	r4, #26
 8004518:	454d      	cmp	r5, r9
 800451a:	d11a      	bne.n	8004552 <_printf_common+0xd6>
 800451c:	2000      	movs	r0, #0
 800451e:	e008      	b.n	8004532 <_printf_common+0xb6>
 8004520:	2301      	movs	r3, #1
 8004522:	4652      	mov	r2, sl
 8004524:	4639      	mov	r1, r7
 8004526:	4630      	mov	r0, r6
 8004528:	47c0      	blx	r8
 800452a:	3001      	adds	r0, #1
 800452c:	d103      	bne.n	8004536 <_printf_common+0xba>
 800452e:	f04f 30ff 	mov.w	r0, #4294967295
 8004532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004536:	3501      	adds	r5, #1
 8004538:	e7c3      	b.n	80044c2 <_printf_common+0x46>
 800453a:	18e1      	adds	r1, r4, r3
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	2030      	movs	r0, #48	; 0x30
 8004540:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004544:	4422      	add	r2, r4
 8004546:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800454a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800454e:	3302      	adds	r3, #2
 8004550:	e7c5      	b.n	80044de <_printf_common+0x62>
 8004552:	2301      	movs	r3, #1
 8004554:	4622      	mov	r2, r4
 8004556:	4639      	mov	r1, r7
 8004558:	4630      	mov	r0, r6
 800455a:	47c0      	blx	r8
 800455c:	3001      	adds	r0, #1
 800455e:	d0e6      	beq.n	800452e <_printf_common+0xb2>
 8004560:	f109 0901 	add.w	r9, r9, #1
 8004564:	e7d8      	b.n	8004518 <_printf_common+0x9c>
	...

08004568 <_printf_i>:
 8004568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800456c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004570:	460c      	mov	r4, r1
 8004572:	7e09      	ldrb	r1, [r1, #24]
 8004574:	b085      	sub	sp, #20
 8004576:	296e      	cmp	r1, #110	; 0x6e
 8004578:	4617      	mov	r7, r2
 800457a:	4606      	mov	r6, r0
 800457c:	4698      	mov	r8, r3
 800457e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004580:	f000 80b3 	beq.w	80046ea <_printf_i+0x182>
 8004584:	d822      	bhi.n	80045cc <_printf_i+0x64>
 8004586:	2963      	cmp	r1, #99	; 0x63
 8004588:	d036      	beq.n	80045f8 <_printf_i+0x90>
 800458a:	d80a      	bhi.n	80045a2 <_printf_i+0x3a>
 800458c:	2900      	cmp	r1, #0
 800458e:	f000 80b9 	beq.w	8004704 <_printf_i+0x19c>
 8004592:	2958      	cmp	r1, #88	; 0x58
 8004594:	f000 8083 	beq.w	800469e <_printf_i+0x136>
 8004598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800459c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80045a0:	e032      	b.n	8004608 <_printf_i+0xa0>
 80045a2:	2964      	cmp	r1, #100	; 0x64
 80045a4:	d001      	beq.n	80045aa <_printf_i+0x42>
 80045a6:	2969      	cmp	r1, #105	; 0x69
 80045a8:	d1f6      	bne.n	8004598 <_printf_i+0x30>
 80045aa:	6820      	ldr	r0, [r4, #0]
 80045ac:	6813      	ldr	r3, [r2, #0]
 80045ae:	0605      	lsls	r5, r0, #24
 80045b0:	f103 0104 	add.w	r1, r3, #4
 80045b4:	d52a      	bpl.n	800460c <_printf_i+0xa4>
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6011      	str	r1, [r2, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da03      	bge.n	80045c6 <_printf_i+0x5e>
 80045be:	222d      	movs	r2, #45	; 0x2d
 80045c0:	425b      	negs	r3, r3
 80045c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80045c6:	486f      	ldr	r0, [pc, #444]	; (8004784 <_printf_i+0x21c>)
 80045c8:	220a      	movs	r2, #10
 80045ca:	e039      	b.n	8004640 <_printf_i+0xd8>
 80045cc:	2973      	cmp	r1, #115	; 0x73
 80045ce:	f000 809d 	beq.w	800470c <_printf_i+0x1a4>
 80045d2:	d808      	bhi.n	80045e6 <_printf_i+0x7e>
 80045d4:	296f      	cmp	r1, #111	; 0x6f
 80045d6:	d020      	beq.n	800461a <_printf_i+0xb2>
 80045d8:	2970      	cmp	r1, #112	; 0x70
 80045da:	d1dd      	bne.n	8004598 <_printf_i+0x30>
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	f043 0320 	orr.w	r3, r3, #32
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	e003      	b.n	80045ee <_printf_i+0x86>
 80045e6:	2975      	cmp	r1, #117	; 0x75
 80045e8:	d017      	beq.n	800461a <_printf_i+0xb2>
 80045ea:	2978      	cmp	r1, #120	; 0x78
 80045ec:	d1d4      	bne.n	8004598 <_printf_i+0x30>
 80045ee:	2378      	movs	r3, #120	; 0x78
 80045f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045f4:	4864      	ldr	r0, [pc, #400]	; (8004788 <_printf_i+0x220>)
 80045f6:	e055      	b.n	80046a4 <_printf_i+0x13c>
 80045f8:	6813      	ldr	r3, [r2, #0]
 80045fa:	1d19      	adds	r1, r3, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6011      	str	r1, [r2, #0]
 8004600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004608:	2301      	movs	r3, #1
 800460a:	e08c      	b.n	8004726 <_printf_i+0x1be>
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6011      	str	r1, [r2, #0]
 8004610:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004614:	bf18      	it	ne
 8004616:	b21b      	sxthne	r3, r3
 8004618:	e7cf      	b.n	80045ba <_printf_i+0x52>
 800461a:	6813      	ldr	r3, [r2, #0]
 800461c:	6825      	ldr	r5, [r4, #0]
 800461e:	1d18      	adds	r0, r3, #4
 8004620:	6010      	str	r0, [r2, #0]
 8004622:	0628      	lsls	r0, r5, #24
 8004624:	d501      	bpl.n	800462a <_printf_i+0xc2>
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	e002      	b.n	8004630 <_printf_i+0xc8>
 800462a:	0668      	lsls	r0, r5, #25
 800462c:	d5fb      	bpl.n	8004626 <_printf_i+0xbe>
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	4854      	ldr	r0, [pc, #336]	; (8004784 <_printf_i+0x21c>)
 8004632:	296f      	cmp	r1, #111	; 0x6f
 8004634:	bf14      	ite	ne
 8004636:	220a      	movne	r2, #10
 8004638:	2208      	moveq	r2, #8
 800463a:	2100      	movs	r1, #0
 800463c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004640:	6865      	ldr	r5, [r4, #4]
 8004642:	60a5      	str	r5, [r4, #8]
 8004644:	2d00      	cmp	r5, #0
 8004646:	f2c0 8095 	blt.w	8004774 <_printf_i+0x20c>
 800464a:	6821      	ldr	r1, [r4, #0]
 800464c:	f021 0104 	bic.w	r1, r1, #4
 8004650:	6021      	str	r1, [r4, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d13d      	bne.n	80046d2 <_printf_i+0x16a>
 8004656:	2d00      	cmp	r5, #0
 8004658:	f040 808e 	bne.w	8004778 <_printf_i+0x210>
 800465c:	4665      	mov	r5, ip
 800465e:	2a08      	cmp	r2, #8
 8004660:	d10b      	bne.n	800467a <_printf_i+0x112>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	07db      	lsls	r3, r3, #31
 8004666:	d508      	bpl.n	800467a <_printf_i+0x112>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	6862      	ldr	r2, [r4, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	bfde      	ittt	le
 8004670:	2330      	movle	r3, #48	; 0x30
 8004672:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004676:	f105 35ff 	addle.w	r5, r5, #4294967295
 800467a:	ebac 0305 	sub.w	r3, ip, r5
 800467e:	6123      	str	r3, [r4, #16]
 8004680:	f8cd 8000 	str.w	r8, [sp]
 8004684:	463b      	mov	r3, r7
 8004686:	aa03      	add	r2, sp, #12
 8004688:	4621      	mov	r1, r4
 800468a:	4630      	mov	r0, r6
 800468c:	f7ff fef6 	bl	800447c <_printf_common>
 8004690:	3001      	adds	r0, #1
 8004692:	d14d      	bne.n	8004730 <_printf_i+0x1c8>
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	b005      	add	sp, #20
 800469a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800469e:	4839      	ldr	r0, [pc, #228]	; (8004784 <_printf_i+0x21c>)
 80046a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80046a4:	6813      	ldr	r3, [r2, #0]
 80046a6:	6821      	ldr	r1, [r4, #0]
 80046a8:	1d1d      	adds	r5, r3, #4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6015      	str	r5, [r2, #0]
 80046ae:	060a      	lsls	r2, r1, #24
 80046b0:	d50b      	bpl.n	80046ca <_printf_i+0x162>
 80046b2:	07ca      	lsls	r2, r1, #31
 80046b4:	bf44      	itt	mi
 80046b6:	f041 0120 	orrmi.w	r1, r1, #32
 80046ba:	6021      	strmi	r1, [r4, #0]
 80046bc:	b91b      	cbnz	r3, 80046c6 <_printf_i+0x15e>
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	f022 0220 	bic.w	r2, r2, #32
 80046c4:	6022      	str	r2, [r4, #0]
 80046c6:	2210      	movs	r2, #16
 80046c8:	e7b7      	b.n	800463a <_printf_i+0xd2>
 80046ca:	064d      	lsls	r5, r1, #25
 80046cc:	bf48      	it	mi
 80046ce:	b29b      	uxthmi	r3, r3
 80046d0:	e7ef      	b.n	80046b2 <_printf_i+0x14a>
 80046d2:	4665      	mov	r5, ip
 80046d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80046d8:	fb02 3311 	mls	r3, r2, r1, r3
 80046dc:	5cc3      	ldrb	r3, [r0, r3]
 80046de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80046e2:	460b      	mov	r3, r1
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d1f5      	bne.n	80046d4 <_printf_i+0x16c>
 80046e8:	e7b9      	b.n	800465e <_printf_i+0xf6>
 80046ea:	6813      	ldr	r3, [r2, #0]
 80046ec:	6825      	ldr	r5, [r4, #0]
 80046ee:	6961      	ldr	r1, [r4, #20]
 80046f0:	1d18      	adds	r0, r3, #4
 80046f2:	6010      	str	r0, [r2, #0]
 80046f4:	0628      	lsls	r0, r5, #24
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	d501      	bpl.n	80046fe <_printf_i+0x196>
 80046fa:	6019      	str	r1, [r3, #0]
 80046fc:	e002      	b.n	8004704 <_printf_i+0x19c>
 80046fe:	066a      	lsls	r2, r5, #25
 8004700:	d5fb      	bpl.n	80046fa <_printf_i+0x192>
 8004702:	8019      	strh	r1, [r3, #0]
 8004704:	2300      	movs	r3, #0
 8004706:	6123      	str	r3, [r4, #16]
 8004708:	4665      	mov	r5, ip
 800470a:	e7b9      	b.n	8004680 <_printf_i+0x118>
 800470c:	6813      	ldr	r3, [r2, #0]
 800470e:	1d19      	adds	r1, r3, #4
 8004710:	6011      	str	r1, [r2, #0]
 8004712:	681d      	ldr	r5, [r3, #0]
 8004714:	6862      	ldr	r2, [r4, #4]
 8004716:	2100      	movs	r1, #0
 8004718:	4628      	mov	r0, r5
 800471a:	f7fb fd99 	bl	8000250 <memchr>
 800471e:	b108      	cbz	r0, 8004724 <_printf_i+0x1bc>
 8004720:	1b40      	subs	r0, r0, r5
 8004722:	6060      	str	r0, [r4, #4]
 8004724:	6863      	ldr	r3, [r4, #4]
 8004726:	6123      	str	r3, [r4, #16]
 8004728:	2300      	movs	r3, #0
 800472a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800472e:	e7a7      	b.n	8004680 <_printf_i+0x118>
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	462a      	mov	r2, r5
 8004734:	4639      	mov	r1, r7
 8004736:	4630      	mov	r0, r6
 8004738:	47c0      	blx	r8
 800473a:	3001      	adds	r0, #1
 800473c:	d0aa      	beq.n	8004694 <_printf_i+0x12c>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	079b      	lsls	r3, r3, #30
 8004742:	d413      	bmi.n	800476c <_printf_i+0x204>
 8004744:	68e0      	ldr	r0, [r4, #12]
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	4298      	cmp	r0, r3
 800474a:	bfb8      	it	lt
 800474c:	4618      	movlt	r0, r3
 800474e:	e7a3      	b.n	8004698 <_printf_i+0x130>
 8004750:	2301      	movs	r3, #1
 8004752:	464a      	mov	r2, r9
 8004754:	4639      	mov	r1, r7
 8004756:	4630      	mov	r0, r6
 8004758:	47c0      	blx	r8
 800475a:	3001      	adds	r0, #1
 800475c:	d09a      	beq.n	8004694 <_printf_i+0x12c>
 800475e:	3501      	adds	r5, #1
 8004760:	68e3      	ldr	r3, [r4, #12]
 8004762:	9a03      	ldr	r2, [sp, #12]
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	42ab      	cmp	r3, r5
 8004768:	dcf2      	bgt.n	8004750 <_printf_i+0x1e8>
 800476a:	e7eb      	b.n	8004744 <_printf_i+0x1dc>
 800476c:	2500      	movs	r5, #0
 800476e:	f104 0919 	add.w	r9, r4, #25
 8004772:	e7f5      	b.n	8004760 <_printf_i+0x1f8>
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ac      	bne.n	80046d2 <_printf_i+0x16a>
 8004778:	7803      	ldrb	r3, [r0, #0]
 800477a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800477e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004782:	e76c      	b.n	800465e <_printf_i+0xf6>
 8004784:	08004a51 	.word	0x08004a51
 8004788:	08004a62 	.word	0x08004a62

0800478c <memcpy>:
 800478c:	b510      	push	{r4, lr}
 800478e:	1e43      	subs	r3, r0, #1
 8004790:	440a      	add	r2, r1
 8004792:	4291      	cmp	r1, r2
 8004794:	d100      	bne.n	8004798 <memcpy+0xc>
 8004796:	bd10      	pop	{r4, pc}
 8004798:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047a0:	e7f7      	b.n	8004792 <memcpy+0x6>

080047a2 <memmove>:
 80047a2:	4288      	cmp	r0, r1
 80047a4:	b510      	push	{r4, lr}
 80047a6:	eb01 0302 	add.w	r3, r1, r2
 80047aa:	d807      	bhi.n	80047bc <memmove+0x1a>
 80047ac:	1e42      	subs	r2, r0, #1
 80047ae:	4299      	cmp	r1, r3
 80047b0:	d00a      	beq.n	80047c8 <memmove+0x26>
 80047b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80047ba:	e7f8      	b.n	80047ae <memmove+0xc>
 80047bc:	4283      	cmp	r3, r0
 80047be:	d9f5      	bls.n	80047ac <memmove+0xa>
 80047c0:	1881      	adds	r1, r0, r2
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	42d3      	cmn	r3, r2
 80047c6:	d100      	bne.n	80047ca <memmove+0x28>
 80047c8:	bd10      	pop	{r4, pc}
 80047ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80047d2:	e7f7      	b.n	80047c4 <memmove+0x22>

080047d4 <_free_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	4605      	mov	r5, r0
 80047d8:	2900      	cmp	r1, #0
 80047da:	d045      	beq.n	8004868 <_free_r+0x94>
 80047dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e0:	1f0c      	subs	r4, r1, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	bfb8      	it	lt
 80047e6:	18e4      	addlt	r4, r4, r3
 80047e8:	f000 f8d2 	bl	8004990 <__malloc_lock>
 80047ec:	4a1f      	ldr	r2, [pc, #124]	; (800486c <_free_r+0x98>)
 80047ee:	6813      	ldr	r3, [r2, #0]
 80047f0:	4610      	mov	r0, r2
 80047f2:	b933      	cbnz	r3, 8004802 <_free_r+0x2e>
 80047f4:	6063      	str	r3, [r4, #4]
 80047f6:	6014      	str	r4, [r2, #0]
 80047f8:	4628      	mov	r0, r5
 80047fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047fe:	f000 b8c8 	b.w	8004992 <__malloc_unlock>
 8004802:	42a3      	cmp	r3, r4
 8004804:	d90c      	bls.n	8004820 <_free_r+0x4c>
 8004806:	6821      	ldr	r1, [r4, #0]
 8004808:	1862      	adds	r2, r4, r1
 800480a:	4293      	cmp	r3, r2
 800480c:	bf04      	itt	eq
 800480e:	681a      	ldreq	r2, [r3, #0]
 8004810:	685b      	ldreq	r3, [r3, #4]
 8004812:	6063      	str	r3, [r4, #4]
 8004814:	bf04      	itt	eq
 8004816:	1852      	addeq	r2, r2, r1
 8004818:	6022      	streq	r2, [r4, #0]
 800481a:	6004      	str	r4, [r0, #0]
 800481c:	e7ec      	b.n	80047f8 <_free_r+0x24>
 800481e:	4613      	mov	r3, r2
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	b10a      	cbz	r2, 8004828 <_free_r+0x54>
 8004824:	42a2      	cmp	r2, r4
 8004826:	d9fa      	bls.n	800481e <_free_r+0x4a>
 8004828:	6819      	ldr	r1, [r3, #0]
 800482a:	1858      	adds	r0, r3, r1
 800482c:	42a0      	cmp	r0, r4
 800482e:	d10b      	bne.n	8004848 <_free_r+0x74>
 8004830:	6820      	ldr	r0, [r4, #0]
 8004832:	4401      	add	r1, r0
 8004834:	1858      	adds	r0, r3, r1
 8004836:	4282      	cmp	r2, r0
 8004838:	6019      	str	r1, [r3, #0]
 800483a:	d1dd      	bne.n	80047f8 <_free_r+0x24>
 800483c:	6810      	ldr	r0, [r2, #0]
 800483e:	6852      	ldr	r2, [r2, #4]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	4401      	add	r1, r0
 8004844:	6019      	str	r1, [r3, #0]
 8004846:	e7d7      	b.n	80047f8 <_free_r+0x24>
 8004848:	d902      	bls.n	8004850 <_free_r+0x7c>
 800484a:	230c      	movs	r3, #12
 800484c:	602b      	str	r3, [r5, #0]
 800484e:	e7d3      	b.n	80047f8 <_free_r+0x24>
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	1821      	adds	r1, r4, r0
 8004854:	428a      	cmp	r2, r1
 8004856:	bf04      	itt	eq
 8004858:	6811      	ldreq	r1, [r2, #0]
 800485a:	6852      	ldreq	r2, [r2, #4]
 800485c:	6062      	str	r2, [r4, #4]
 800485e:	bf04      	itt	eq
 8004860:	1809      	addeq	r1, r1, r0
 8004862:	6021      	streq	r1, [r4, #0]
 8004864:	605c      	str	r4, [r3, #4]
 8004866:	e7c7      	b.n	80047f8 <_free_r+0x24>
 8004868:	bd38      	pop	{r3, r4, r5, pc}
 800486a:	bf00      	nop
 800486c:	200000bc 	.word	0x200000bc

08004870 <_malloc_r>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	1ccd      	adds	r5, r1, #3
 8004874:	f025 0503 	bic.w	r5, r5, #3
 8004878:	3508      	adds	r5, #8
 800487a:	2d0c      	cmp	r5, #12
 800487c:	bf38      	it	cc
 800487e:	250c      	movcc	r5, #12
 8004880:	2d00      	cmp	r5, #0
 8004882:	4606      	mov	r6, r0
 8004884:	db01      	blt.n	800488a <_malloc_r+0x1a>
 8004886:	42a9      	cmp	r1, r5
 8004888:	d903      	bls.n	8004892 <_malloc_r+0x22>
 800488a:	230c      	movs	r3, #12
 800488c:	6033      	str	r3, [r6, #0]
 800488e:	2000      	movs	r0, #0
 8004890:	bd70      	pop	{r4, r5, r6, pc}
 8004892:	f000 f87d 	bl	8004990 <__malloc_lock>
 8004896:	4a21      	ldr	r2, [pc, #132]	; (800491c <_malloc_r+0xac>)
 8004898:	6814      	ldr	r4, [r2, #0]
 800489a:	4621      	mov	r1, r4
 800489c:	b991      	cbnz	r1, 80048c4 <_malloc_r+0x54>
 800489e:	4c20      	ldr	r4, [pc, #128]	; (8004920 <_malloc_r+0xb0>)
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	b91b      	cbnz	r3, 80048ac <_malloc_r+0x3c>
 80048a4:	4630      	mov	r0, r6
 80048a6:	f000 f863 	bl	8004970 <_sbrk_r>
 80048aa:	6020      	str	r0, [r4, #0]
 80048ac:	4629      	mov	r1, r5
 80048ae:	4630      	mov	r0, r6
 80048b0:	f000 f85e 	bl	8004970 <_sbrk_r>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d124      	bne.n	8004902 <_malloc_r+0x92>
 80048b8:	230c      	movs	r3, #12
 80048ba:	6033      	str	r3, [r6, #0]
 80048bc:	4630      	mov	r0, r6
 80048be:	f000 f868 	bl	8004992 <__malloc_unlock>
 80048c2:	e7e4      	b.n	800488e <_malloc_r+0x1e>
 80048c4:	680b      	ldr	r3, [r1, #0]
 80048c6:	1b5b      	subs	r3, r3, r5
 80048c8:	d418      	bmi.n	80048fc <_malloc_r+0x8c>
 80048ca:	2b0b      	cmp	r3, #11
 80048cc:	d90f      	bls.n	80048ee <_malloc_r+0x7e>
 80048ce:	600b      	str	r3, [r1, #0]
 80048d0:	50cd      	str	r5, [r1, r3]
 80048d2:	18cc      	adds	r4, r1, r3
 80048d4:	4630      	mov	r0, r6
 80048d6:	f000 f85c 	bl	8004992 <__malloc_unlock>
 80048da:	f104 000b 	add.w	r0, r4, #11
 80048de:	1d23      	adds	r3, r4, #4
 80048e0:	f020 0007 	bic.w	r0, r0, #7
 80048e4:	1ac3      	subs	r3, r0, r3
 80048e6:	d0d3      	beq.n	8004890 <_malloc_r+0x20>
 80048e8:	425a      	negs	r2, r3
 80048ea:	50e2      	str	r2, [r4, r3]
 80048ec:	e7d0      	b.n	8004890 <_malloc_r+0x20>
 80048ee:	428c      	cmp	r4, r1
 80048f0:	684b      	ldr	r3, [r1, #4]
 80048f2:	bf16      	itet	ne
 80048f4:	6063      	strne	r3, [r4, #4]
 80048f6:	6013      	streq	r3, [r2, #0]
 80048f8:	460c      	movne	r4, r1
 80048fa:	e7eb      	b.n	80048d4 <_malloc_r+0x64>
 80048fc:	460c      	mov	r4, r1
 80048fe:	6849      	ldr	r1, [r1, #4]
 8004900:	e7cc      	b.n	800489c <_malloc_r+0x2c>
 8004902:	1cc4      	adds	r4, r0, #3
 8004904:	f024 0403 	bic.w	r4, r4, #3
 8004908:	42a0      	cmp	r0, r4
 800490a:	d005      	beq.n	8004918 <_malloc_r+0xa8>
 800490c:	1a21      	subs	r1, r4, r0
 800490e:	4630      	mov	r0, r6
 8004910:	f000 f82e 	bl	8004970 <_sbrk_r>
 8004914:	3001      	adds	r0, #1
 8004916:	d0cf      	beq.n	80048b8 <_malloc_r+0x48>
 8004918:	6025      	str	r5, [r4, #0]
 800491a:	e7db      	b.n	80048d4 <_malloc_r+0x64>
 800491c:	200000bc 	.word	0x200000bc
 8004920:	200000c0 	.word	0x200000c0

08004924 <_realloc_r>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	4607      	mov	r7, r0
 8004928:	4614      	mov	r4, r2
 800492a:	460e      	mov	r6, r1
 800492c:	b921      	cbnz	r1, 8004938 <_realloc_r+0x14>
 800492e:	4611      	mov	r1, r2
 8004930:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004934:	f7ff bf9c 	b.w	8004870 <_malloc_r>
 8004938:	b922      	cbnz	r2, 8004944 <_realloc_r+0x20>
 800493a:	f7ff ff4b 	bl	80047d4 <_free_r>
 800493e:	4625      	mov	r5, r4
 8004940:	4628      	mov	r0, r5
 8004942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004944:	f000 f826 	bl	8004994 <_malloc_usable_size_r>
 8004948:	42a0      	cmp	r0, r4
 800494a:	d20f      	bcs.n	800496c <_realloc_r+0x48>
 800494c:	4621      	mov	r1, r4
 800494e:	4638      	mov	r0, r7
 8004950:	f7ff ff8e 	bl	8004870 <_malloc_r>
 8004954:	4605      	mov	r5, r0
 8004956:	2800      	cmp	r0, #0
 8004958:	d0f2      	beq.n	8004940 <_realloc_r+0x1c>
 800495a:	4631      	mov	r1, r6
 800495c:	4622      	mov	r2, r4
 800495e:	f7ff ff15 	bl	800478c <memcpy>
 8004962:	4631      	mov	r1, r6
 8004964:	4638      	mov	r0, r7
 8004966:	f7ff ff35 	bl	80047d4 <_free_r>
 800496a:	e7e9      	b.n	8004940 <_realloc_r+0x1c>
 800496c:	4635      	mov	r5, r6
 800496e:	e7e7      	b.n	8004940 <_realloc_r+0x1c>

08004970 <_sbrk_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4c06      	ldr	r4, [pc, #24]	; (800498c <_sbrk_r+0x1c>)
 8004974:	2300      	movs	r3, #0
 8004976:	4605      	mov	r5, r0
 8004978:	4608      	mov	r0, r1
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	f7fc fc2a 	bl	80011d4 <_sbrk>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_sbrk_r+0x1a>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	b103      	cbz	r3, 800498a <_sbrk_r+0x1a>
 8004988:	602b      	str	r3, [r5, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	20000188 	.word	0x20000188

08004990 <__malloc_lock>:
 8004990:	4770      	bx	lr

08004992 <__malloc_unlock>:
 8004992:	4770      	bx	lr

08004994 <_malloc_usable_size_r>:
 8004994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004998:	1f18      	subs	r0, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfbc      	itt	lt
 800499e:	580b      	ldrlt	r3, [r1, r0]
 80049a0:	18c0      	addlt	r0, r0, r3
 80049a2:	4770      	bx	lr

080049a4 <_init>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	bf00      	nop
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr

080049b0 <_fini>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	bf00      	nop
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr
